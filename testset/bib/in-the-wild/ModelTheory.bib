@Article{Alagi02,
  author =	 {Suad Alagi},
  title =	 {Institutions: integrating objects, {XML} and
                  databases},
  journal =	 {Information and Software Technology},
  year =	 {2002},
  Volume =	 44,
  Pages =	 {207-216},
  Abstract =	 {A general model theory based on institutions is
                  proposed as a formal framework for investigating
                  typed object-oriented, XML and other data models
                  equipped with integrity constraints. A major
                  challenge in developing such a unified model theory
                  is in the requirement that it must be able to handle
                  major structural differences between the targeted
                  models as well as the significant differences in the
                  logic bases of their associated constraint
                  languages. A distinctive feature of this model
                  theory is that it is transformation-oriented. It is
                  based on structural transformations within a
                  particular category of models or across different
                  categories with a fundamental requirement that the
                  associated constraints are managed in such a way
                  that the database integrity is preserved. },
  keywords =	 {ModelTheory Morphisms},
}



@article{Aspinall95,
  author =	 "D. Aspinall",
  title =	 "Types, Subtypes, and {ASL+}",
  journal =	 "Lecture Notes in Computer Science",
  volume =	 "906",
  pages =	 "116--??",
  year =	 "1995",
  keywords =	 {ModelTheory},
  abstract =	 {ASL+ is a formalism for specification and
                  programming in-the-large, based on an arbitrary
                  institution. It has rules for proving the
                  satisfaction and refinement of specifications, which
                  can be seen as a type theory with subtyping,
                  including contravariant refinement for
                  \Pi-abstracted specifications and a notion of
                  stratified equality for higher-order objects. We
                  describe the syntax of the language and a partial
                  equivalence relation semantics. This style of
                  semantics is familiar from subtyping calculi, but a
                  novelty here is the use of a hierarchy of typed
                  domains instead of a single untyped domain. },
  url =		 "citeseer.nj.nec.com/aspinall95types.html"
}



@PhdThesis{Aspinall97,
  author =	 {David Aspinall},
  title =	 {Type Systems for Modular Programming and
                  Specification},
  school =	 {Edinburgh},
  year =	 {1997},
  keywords =	 {ModelTheory},
}



@INCOLLECTION{Baumeister91,
  AUTHOR =	 "H. Baumeister",
  TITLE =	 "Unifying Initial and Loose Semantics of
                  Parameterized Specifications in an Arbitrary
                  Institution",
  BOOKTITLE =	 "TAPSOFT 91 Vol. 1: CAAP 91",
  EDITOR =	 {S. Abramsky and T.S.E. Maibaum},
  SERIES =	 "Lecture Notes in Computer Science",
  VOLUME =	 493,
  PAGES =	 {103--120},
  PUBLISHER =	 {Springer Verlag},
  YEAR =	 1991,
  keywords =	 {ModelTheory},
}



@Incollection{Baumeister95,
  author =	 "H. Baumeister",
  title =	 "Relations as Abstract Datatypes: An Institution to
                  Specify Relations Between Algebras",
  Publisher =	 {Springer Verlag},
  editor =	 {Peter D. Mosses and Mogens Nielsen and Michael
                  I. Schwartzbach},
  booktitle =	 {TAPSOFT'95: Theory and Practice of Software
                  Development, 6th International Joint Conference},
  series =	 {Lecture Notes in Computer Science},
  volume =	 "915",
  pages =	 "756--771",
  year =	 "1995",
  coden =	 "LNCSD9",
  ISSN =	 "0302-9743",
  keywords =	 {ModelTheory},
}



@phdthesis{Baumeister98,
  author =	 "H. Baumeister",
  title =	 "Relations between Abstract Datatypes modeled as
                  Abstract Datatypes",
  school =	 "Universit{\"a}t des Saarlandes",
  year =	 "1998",
  keywords =	 {ModelTheory},
}



@InProceedings{BeierlelncsVoss87,
  author =	 "C. Beierle and A. Voss",
  title =	 "Viewing Implementations as an Institution",
  pages =	 "196--218",
  ISBN =	 "3-540-18508-9",
  editor =	 "D. E. Rydeheard {D.H. Pitt, A. Poign{\'e}}",
  booktitle =	 "Proceedings of the Conference on Category Theory and
                  Computer Science",
  address =	 "Edinburgh, UK",
  month =	 sep,
  year =	 "1987",
  series =	 "LNCS",
  volume =	 "283",
  publisher =	 "Springer",
  keywords =	 {ModelTheory},
}



@inproceedings{BidoitHennicker93,
  author =	 "Michel Bidoit and Rolf Hennicker",
  title =	 "A General Framework for Modular Implementations of
                  Modular System Specifications",
  booktitle =	 "{TAPSOFT}",
  pages =	 "199-214",
  year =	 "1993",
  keywords =	 {ModelTheory},
  abstract =	 {We investigate the impact of modularity on the
                  semantics and on the implementation of software
                  specifications. Based on the stratified loose
                  semantics approach we develop a suitable
                  specification framework which meets our basic
                  requirements: the independent construction of
                  implementations for the single constituent parts
                  (modules) of a system specification and the
                  encapsulated development of each implementation part
                  using the principle of stepwise refinement. Our
                  paper is not aimed at providing an elaborated
                  specification language but rather to concentrate on
                  the modularity issues of system development. Hence,
                  only few but powerful constructs are provided which
                  can be seen as a kernel for ...},
  url =		 "citeseer.nj.nec.com/bidoit93general.html",
}



@inbook{BurstallDiaconescu94,
  AUTHOR =	 {R. Burstall and R. Diaconescu},
  TITLE =	 {Hiding and behaviour: an institutional approach},
  BOOKTITLE =	 {A Classical Mind: Essays Dedicated to C.A.R. Hoare},
  editor =	 {A. William Roscoe},
  pages =	 {75--92},
  PUBLISHER =	 {Prentice-Hall},
  keywords =	 {ModelTheory},
  YEAR =	 {1994}
}



@Incollection{CerioliZucca97,
  author =	 {M. Cerioli and E. Zucca},
  title =	 {Implementation of Derived Programs (Almost) for
                  Free},
  booktitle =	 {Recent trends in algebraic development
                  techniques. Proc.\ 12th International Workshop},
  editor =	 {F. {Parisi Presicce}},
  series =	 {Lecture Notes in Computer Science},
  volume =	 {1376},
  publisher =	 {Springer},
  Year =	 1998,
  pages =	 {141--155},
  keywords =	 {ModelTheory Metaformalisms},
}



@article{CorneliusEtAl95,
  author =	 {Cornelius, F. and Ehrig, H. and Orejas, F. and
                  Baldamus, M.},
  title =	 {Abstract and behaviour module specifications},
  journal =	 {Mathematical Structures in Computer Science},
  volume =	 9,
  pages =	 {21--62},
  year =	 {1999},
  abstract =	 {The theory of algebraic module specifications and
                  modular systems developed mainly in the framework of
                  equational algebraic specifications is shown to be
                  almost independent of the und erlying kind of
                  specifications. In fact, it is shown in this paper
                  that the theory can be formulated entirely on the
                  level of specification frames using indexed
                  categories. In this framework it is called abstract
                  module specifications. Main results concerning
                  correctness and compositionality of abstract module
                  specifications can be obtained if the category of
                  abstract specifications has certain kinds of
                  pushouts which allow amalgamations and/or extensions
                  on the semantical level, as well as suitable free
                  constructions. The theory of abstract module
                  specifications is applied to the behaviour
                  specification frame in the sense of Nivela and
                  Orejas leading to behaviour module specifications.},
  keywords =	 {ModelTheory},
}



@article{Diaconescu00,
  author =	 "Razvan Diaconescu",
  title =	 "Category-based constraint logic",
  journal =	 "Mathematical Structures in Computer Science",
  volume =	 "10",
  number =	 "3",
  pages =	 "373-407",
  year =	 "2000",
  keywords =	 {ModelTheory Logics},
  url =		 "citeseer.nj.nec.com/diaconescu99categorybased.html",
}



@article{DiaconescuFutatsugi02,
  author =	 "R. Diaconescu and K. Futatsugi",
  title =	 "Logical foundations of {CafeOBJ}",
  journal =	 {Theoretical computer science},
  volume =	 {285},
  pages =	 {289--318},
  year =	 {2002},
  keywords =	 {ModelTheory Logics Heterogeneity},
}



@INPROCEEDINGS{DiaconescuGoGuenStefaneas91,
  AUTHOR =	 {Diaconescu, R{\u{a}}zvan and Goguen, Joseph and
                  Stefaneas, Petros},
  TITLE =	 {Logical Support for Modularisation},
  BOOKTITLE =	 {Proceedings of a Workshop on Logical Frameworks},
  EDITOR =	 {Huet, Gerard and Plotkin, Gordon},
  YEAR =	 {1991},
  HOWPUBLISHED = {Programming Research Group, Oxford University},
  keywords =	 {ModelTheory},
}



@incollection{DuranMeseguer99,
  author =	 "Francisco Dur\'an and Jos\'e Meseguer",
  title =	 "Structured Theories and Institutions",
  editor =	 {Martin Hofmann and Giuseppe Rosolini and Dusko
                  Pavlovic},
  booktitle =	 {CTCS '99 Conference on Category Theory and Computer
                  Science},
  series =	 {Electronic Notes in Theoretical Computer Science},
  volume =	 29,
  year =	 1999,
  keywords =	 {ModelTheory},
  url =		 "citeseer.nj.nec.com/465777.html"
}



@ARTICLE{EhrigGrosseRhode94,
  AUTHOR =	 "H. Ehrig and M. Gro\ss{}e--{R}hode",
  TITLE =	 "Functorial theory of parameterized specifications in
                  a general specification framework",
  JOURNAL =	 "Theoretical Computer Science",
  VOLUME =	 135,
  PAGES =	 {221--266},
  YEAR =	 1994,
  abstract =	 {A general specification framework based on the
                  notion of indexed categories is introduced in order
                  to study the structural aspects of specifications
                  independent of the underlying logics. Similar to
                  institutions this concept of specification frames
                  allows to formulate a unified structural theory of
                  various kinds of algebraic specifications which have
                  been studied separately in the literature before. In
                  contrast to institutions we do not require to have
                  satisfaction relations and conditions which allows
                  to handle also behavioural specifications and
                  semantics and various concepts of constraints in
                  this framework. In this framework we generalize the
                  well-known theory of parameterized algebraic
                  specifications with initial semantics from the
                  equational case to specification frames satisfying
                  mainly three basic axioms. The existence of
                  pushouts, free constructions and
                  amalgamation. Moreover, an axiomatic treatment of
                  restriction is presented which allows to study in
                  addition to refinement also implementations of
                  parameterized specifications including
                  restrictions. Finally we present an axiomatic
                  framework for functorial semantics which opens the
                  way to apply the theory not only to initial
                  semantics but also to other kinds of functorial
                  semantics, including final and specific kinds of
                  loose semantics. },
  keywords =	 {ModelTheory},
}



@INCOLLECTION{EhrigJimenezOrejas93,
  AUTHOR =	 {H. Ehrig and R. M. Jimenez and F. Orejas},
  TITLE =	 {Compositionality Results for Different Types of
                  Parameterization and Parameter Passing in
                  Specification Languages},
  BOOKTITLE =	 {TAPSOFT 93},
  EDITOR =	 {M.-C. Gaudel and J.-P. Jouannaud},
  SERIES =	 {Lecture Notes in Computer Science},
  PUBLISHER =	 {Springer Verlag},
  VOLUME =	 668,
  PAGES =	 {31--45},
  YEAR =	 1993,
  keywords =	 {ModelTheory},
}



@incollection{EhrigKreowski99,
  AUTHOR =	 {H. Ehrig and H.-J. Kreowski},
  TITLE =	 {Refinement and Implementation},
  BOOKTITLE =	 {Algebraic Foundations of Systems Specifications},
  PUBLISHER =	 {Springer Verlag},
  pages =	 {201--242},
  keywords =	 {ModelTheory},
  EDITOR =	 {E.~Astesiano and H.-J.~Kreowski and
                  B.~Krieg--Br\"uckner},
  YEAR =	 {1999},
}



@BOOK{EhrigMahr90,
  AUTHOR =	 "H. Ehrig and B. Mahr",
  TITLE =	 "Fundamentals of Algebraic Specification 2",
  PUBLISHER =	 "Springer Verlag, Heidelberg",
  YEAR =	 1990,
  keywords =	 {ModelTheory},
}



@InProceedings{Goguen91a,
  author =	 "Joseph A. Goguen",
  title =	 "Types as Theories",
  booktitle =	 "Proc. of Symposium on General Topology and
                  Applications",
  publisher =	 "Oxford University Press",
  year =	 "1991",
  keywords =	 {ModelTheory},
}



@InCollection{GoguenTracz00,
  key =		 "Goguen \& Tracz",
  author =	 "Joseph A. Goguen and Will Tracz",
  title =	 "An Implementation-Oriented Semantics for Module
                  Composition",
  booktitle =	 "Foundations of Component-Based Systems",
  editor =	 "Gary T. Leavens and Murali Sitaraman",
  year =	 "2000",
  publisher =	 "Cambridge University Press",
  address =	 "New York, NY",
  ISBN =	 "0-521-77164-1",
  chapter =	 "11",
  pages =	 "231--263",
  annote =	 "29 references.",
  url =		 "citeseer.nj.nec.com/206136.html",
  keywords =	 {ModelTheory},
}



@Article{JimenezOrejasEhrig95,
  author =	 {R. M. Jimenez and F. Orejas and H. Ehrig},
  title =	 {Compositionality and compatibility of
                  parameterization and parameter passing in
                  specification languages},
  journal =	 {MSCS},
  year =	 {1995},
  keywords =	 {ModelTheory},
  volume =	 {5},
  number =	 {2},
  pages =	 {283--314},
  abstract =	 {In this paper we continue previous work by Sannella,
                  Sokolowski and Tarlecki on parameterization in
                  specification languages. Within the loose approach,
                  we define specification and model level semantics
                  for two kinds of parameterizations (parameterized
                  specifications and specifications of parameterized
                  data types) and describe, in a compositional manner,
                  parameter passing at both levels. Moreover, the
                  specification and the model level semantics of
                  parameter passing are shown to be compatible. We
                  also show that the results obtained do not only
                  apply to the loose approach but can also be directly
                  applicable to the initial framework, and in general
                  to any other kind of monomorphic framework (i.e., a
                  framework where all specifications are
                  monomorphic). In particular, the results obtained
                  generalize and extend previous results for the
                  initial approach. Finally, to obtain our results,
                  new categorical constructions of multiple pushouts,
                  amalgamations and extensions, which generalize
                  standard notions of pushouts, amalgamations and
                  extensions, had to be introduced. },
}



@incollection{Mossakowski00c,
  Author =	 {T. Mossakowski},
  Title =	 {Specification in an arbitrary institution with
                  symbols},
  Editor =	 {C. Choppy and D. Bert and P. Mosses},
  Booktitle =	 {Recent Trends in Algebraic Development Techniques,
                  14th International Workshop, WADT'99, Bonas, France},
  series =	 "Lecture Notes in Computer Science",
  publisher =	 "Springer-Verlag",
  volume =	 {1827},
  year =	 2000,
  pages =	 {252--270},
  keywords =	 {Metaformalisms ModelTheory},
}



@incollection{Orejas99,
  AUTHOR =	 {F. Orejas},
  TITLE =	 {Structuring and Modularity},
  BOOKTITLE =	 {Algebraic Foundations of Systems Specifications},
  PUBLISHER =	 {Springer Verlag},
  pages =	 {159--200},
  keywords =	 {ModelTheory},
  EDITOR =	 {E.~Astesiano and H.-J.~Kreowski and
                  B.~Krieg--Br\"uckner},
  YEAR =	 {1999},
}



@phdthesis{Sannella82,
  author =	 {Donald Sannella},
  title =	 {Semantics, Implementation and Pragmatics of {C}lear,
                  a Program Specification Language},
  school =	 {Department of Computer Science, University of
                  Edinburgh},
  year =	 1982,
  abstract =	 {Specifications are necessary for communicating
                  decisions and intentions and for documenting results
                  at many stages of the program development
                  process. Informal specifications are typically used
                  today, but they are imprecise and often
                  ambiguous. Formal specifications are precise and
                  exact but are more difficult to write and
                  understand. We present work aimed toward enabling
                  the practical use of formal specifications in
                  program development, concentrating on the Clear
                  language for structured algebraic specification. Two
                  different but equivalent denotational semantics for
                  Clear are given. One is a version of a semantics due
                  to Burstall and Goguen with a few corrections, in
                  which the category-theoretic notion of a colimit is
                  used to define Clear's structuring operations
                  independently of the underlying ``institution''
                  (logical formalism). The other semantics defines the
                  same operations by means of straightforward
                  set-theoretic constructions; it is not
                  institution-independent but it can be modified to
                  handle all institutions of apparent interest. Both
                  versions of the semantics have been implemented. The
                  set-theoretic implementation is by far the more
                  useful of the two, and includes a parser and
                  typechecker. An implementation is useful for
                  detecting syntax and type errors in specifications,
                  and can be used as a front end for systems which
                  manipulate specifications. Several large
                  specifications which have been processed by the
                  set-theoretic implementation are presented. A
                  semi-automatic theorem prover for Clear built on top
                  of the Edinburgh LCF system is described. It takes
                  advantage of the structure of Clear specifications
                  to restrict the available information to that which
                  seems relevant to proving the theorem at hand. If
                  the system is unable to prove a theorem
                  automatically the user can attempt the proof
                  interactively using the high-level primitives and
                  inference rules provided. We lay a theoretical
                  foundation for the use of Clear in systematic
                  program development by investigating a new notion of
                  the implementation of a specification by a
                  lower-level specification. This notion extends to
                  handle parameterised specifications. We show that
                  this implementation relation is transitive and
                  commutes with Clear's structuring operations under
                  certain conditions. This means that a large
                  specification can be refined to a program in a
                  gradual and modular fashion, where the correctness
                  of the individual refinements guarantees the
                  correctness of the resulting program.},
  comment =	 {Report CST-17-82},
  keywords =	 {ModelTheory},
}



@article{SannellaSokolowskiTarlecki92,
  author =	 {Donald Sannella and Stefan Soko{\l}owski and Andrzej
                  Tarlecki},
  title =	 {Toward Formal Development of Programs from Algebraic
                  Specifications: Parameterisation Revisited},
  journal =	 {Acta Informatica},
  volume =	 29,
  number =	 8,
  pages =	 {689--736},
  comment =	 {Reviewed in CR 9405-0310, CR 9503-0176; an early
                  version of this, with an extended example in an
                  appendix, appeared as report 6/90, Univ. Bremen,
                  1990},
  year =	 1992,
  url =		 {ftp://ftp.dcs.ed.ac.uk/pub/dts/param.ps},
  postscript =	 {param.ps},
  abstract =	 {Parameterisation is an important mechanism for
                  structuring programs and specifications into modular
                  units. The interplay between parameterisation (of
                  programs and of specifications) and specification
                  (of parameterised and of non-parameterised programs)
                  is analysed, exposing important semantic and
                  methodological differences between specifications of
                  parameterised programs and parameterised
                  specifications. The extension of parameterisation
                  mechanisms to the higher-order case is considered,
                  both for parameterised programs and parameterised
                  specifications, and the methodological consequences
                  of such an extension are explored. A specification
                  formalism with parameterisation of an arbitrary
                  order is presented. Its denotational-style semantics
                  is accompanied by an inference system for proving
                  that an object satisfies a specification. The
                  formalism includes the basic specification-building
                  operations of the ASL specification language and is
                  institution independent.},
  keywords =	 {ModelTheory},
}



@article{SannellaTarlecki87,
  author =	 {Donald Sannella and Andrzej Tarlecki},
  title =	 {On Observational Equivalence and Algebraic
                  Specification},
  journal =	 {Journal of Computer and System Sciences},
  volume =	 34,
  pages =	 {150--178},
  year =	 1987,
  abstract =	 {The properties of a simple and natural notion of
                  observational equivalence of algebras and the
                  corresponding specification-building operation are
                  studied. We begin with a definition of observational
                  equivalence which is adequate to handle reachable
                  algebras only, and show how to extend it to cope
                  with unreachable algebras and also how it may be
                  generalised to make sense under an arbitrary
                  institution. Behavioural equivalence is treated as
                  an important special case of observational
                  equivalence, and its central role in program
                  development is shown by means of an example.},
  comment =	 {Reviewed in MR 88j:68118 and CR 8808-0615; this is
                  the final complete version of
                  SannellaDT:observational-equivalence85},
  keywords =	 {ModelTheory},
}



@article{SannellaTarlecki88a,
  author =	 {Donald Sannella and Andrzej Tarlecki},
  title =	 {Toward Formal Development of Programs from Algebraic
                  Specifications: Implementations Revisited},
  journal =	 {Acta Informatica},
  volume =	 25,
  pages =	 {233--281},
  year =	 1988,
  url =		 {ftp://ftp.dcs.ed.ac.uk/pub/dts/impl.ps},
  postscript =	 {impl.ps},
  abstract =	 {The program development process is viewed as a
                  sequence of implementation steps leading from a
                  specification to a program. Based on an elementary
                  notion of refinement, two notions of implementation
                  are studied: constructor implementations which
                  involve a construction ``on top of'' the
                  implementing specification, and abstractor
                  implementations which additionally provide for
                  abstraction from some details of the implemented
                  specification. These subsume most formal notions of
                  implementation in the literature. Both kinds of
                  implementations satisfy a vertical composition and a
                  (modified) horizontal composition property. All the
                  definitions and results are shown to generalise to
                  the framework of an arbitrary institution, and a way
                  of changing institutions during the implementation
                  process is introduced. All this is illustrated by
                  means of simple concrete examples.},
  comment =	 {This is the final version of
                  SannellaDT:implementations-revisited87},
  keywords =	 {ModelTheory},
}



@article{SannellaTarlecki88b,
  author =	 {Donald Sannella and Andrzej Tarlecki},
  title =	 {Specifications in an Arbitrary Institution},
  journal =	 {Information and Computation},
  volume =	 76,
  pages =	 {165--210},
  year =	 1988,
  abstract =	 {A formalism for constructing and using axiomatic
                  specifications in an arbitrary logical system is
                  presented. This builds on the framework provided by
                  Goguen and Burstall's work on the notion of an
                  \emph{institution} as a formalisation of the concept
                  of a logical system for writing specifications. We
                  show how to introduce free variables into the
                  sentences of an arbitrary institution and how to add
                  quantifiers which bind them. We use this foundation
                  to define a set of primitive operations for building
                  specifications in an arbitrary institution based
                  loosely on those in the ASL kernel specification
                  language. We examine the set of operations which
                  results when the definitions are instantiated in
                  institutions of total and partial first-order logic
                  and compare these with the operations found in
                  existing specification languages. We present proof
                  rules which allow proofs to be conducted in
                  specifications built using the operations we
                  define. Finally, we introduce a simple mechanism for
                  defining and applying parameterised specifications
                  and briefly discuss the program development
                  process.},
  comment =	 {Reviewed in MR 89d:68056 and Zbl 654.68017; an early
                  short version was
                  SannellaDT:specs-arbitrary-institution84},
  keywords =	 {ModelTheory},
}



@Incollection{SchroederEtAl01a,
  author =	 "Lutz Schr{\"o}der and Till Mossakowski and Andrzej
                  Tarlecki and Bartek Klin and Piotr Hoffman",
  title =	 "Semantics of Architectural Specifications in {CASL}",
  Editor =	 {H. Hu\ss{}mann},
  Booktitle =	 {Fundamental Approaches to Software Engineering},
  series =	 "Lecture Notes in Computer Science",
  publisher =	 "Springer-Verlag",
  volume =	 "2029",
  pages =	 "253--268",
  year =	 "2001",
  ISSN =	 "0302-9743",
  url =
                  "http://link.springer-ny.com/link/service/series/0558/bibs/2029/20290253.htm; http://link.springer-ny.com/link/service/series/0558/papers/2029/20290253.pdf",
  keywords =	 {ModelTheory},
}



@InCollection{SernadasSernadas86,
  author =	 "C. Sernadas and A. Sernadas",
  title =	 "Conceptual Modeling Abstractions as Parameterized
                  Theories in Institutions",
  booktitle =	 "Database Semantics, N-H",
  year =	 "1986",
  keywords =	 {ModelTheory},
}



@TechReport{SernadasSernadas93,
  author =	 "A. Sernadas and C. Sernadas",
  title =	 "Denotational Semantics of Object Specification
                  Within an Arbitrary Temporal Logic Institution",
  type =	 "Research Report",
  institution =	 "Section of Computer Science, Department of
                  Mathematics, Instituto Superior T\'ecnico",
  address =	 "1049-001 Lisboa, Portugal",
  year =	 "1993",
  note =	 "Presented at IS-CORE Workshop 93",
  ps =
                  "http://www.cs.math.ist.utl.pt/ftp/pub/SernadasA/93-SS-osli.ps",
  st =		 "c",
  keywords =	 {Metaformalisms ModelTheory},
}



@ARTICLE{Tarlecki86a,
  AUTHOR =	 "A. Tarlecki",
  TITLE =	 "Quasi-varieties in Abstract Algebraic Institutions",
  JOURNAL =	 "Journal of Computer and System Sciences",
  VOLUME =	 33,
  PAGES =	 {333--360},
  YEAR =	 1986,
  keywords =	 {ModelTheory Metatheorems},
}



