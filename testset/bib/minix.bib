%%% -*-BibTeX-*-
%%% ====================================================================
%%%  BibTeX-file{
%%%     author          = "Nelson H. F. Beebe",
%%%     version         = "2.04",
%%%     date            = "10 October 2008",
%%%     time            = "12:56:55 MDT",
%%%     filename        = "minix.bib",
%%%     address         = "University of Utah
%%%                        Department of Mathematics, 110 LCB
%%%                        155 S 1400 E RM 233
%%%                        Salt Lake City, UT 84112-0090
%%%                        USA",
%%%     telephone       = "+1 801 581 5254",
%%%     FAX             = "+1 801 581 4148",
%%%     URL             = "http://www.math.utah.edu/~beebe",
%%%     checksum        = "13166 3742 19830 179028",
%%%     email           = "beebe at math.utah.edu, beebe at acm.org,
%%%                        beebe at computer.org (Internet)",
%%%     codetable       = "ISO/ASCII",
%%%     keywords        = "Minix, operating system",
%%%     license         = "public domain",
%%%     supported       = "yes",
%%%     docstring       = "This is a bibliography of publications
%%%                        about Minix, a UNIX-like operating system.
%%%
%%%                        After a several-year-long hiatus, Minix
%%%                        development is again active, with a Web
%%%                        site at:
%%%
%%%                            http://www.minix3.org/
%%%
%%%                        Companion bibliographies linux.bib and
%%%                        unix.bib in this collection cover the Linux
%%%                        and UNIX operating systems, compsys.bib
%%%                        covers the Computing Systems journal of the
%%%                        USENIX Association published with the
%%%                        collaboration of the European UNIX Systems
%%%                        Users Group (EUUG), and usenix.bib covers
%%%                        publications of the USENIX Association, and
%%%                        its conferences and workshops.
%%%
%%%                        At version 2.04, the year coverage looked
%%%                        like this:
%%%
%%%                             1987 (   7)    1995 (   8)    2003 (   0)
%%%                             1988 (  18)    1996 (   1)    2004 (   2)
%%%                             1989 (  12)    1997 (   4)    2005 (   1)
%%%                             1990 (  18)    1998 (   2)    2006 (  15)
%%%                             1991 (  12)    1999 (   0)    2007 (   1)
%%%                             1992 (   8)    2000 (   0)    2008 (   1)
%%%                             1993 (   8)    2001 (   1)
%%%                             1994 (   3)    2002 (   1)
%%%
%%%                             Article:         39
%%%                             Book:             9
%%%                             InProceedings:   18
%%%                             MastersThesis:   32
%%%                             Misc:             6
%%%                             Proceedings:     18
%%%                             TechReport:       1
%%%
%%%                             Total entries:  123
%%%
%%%                        This bibliography was collected from the
%%%                        OCLC library databases, from the University
%%%                        of California MELVYL catalog, from the
%%%                        U. S. Library of Congress catalog, from the
%%%                        IEEE INSPEC (1989--1995) database, from the
%%%                        author's bibliography collections, and from
%%%                        a very large computer science bibliography
%%%                        collection on ftp.ira.uka.de in
%%%                        /pub/bibliography to which many people of
%%%                        have contributed.  The snapshot of this
%%%                        collection was taken on 5-May-1994, and it
%%%                        consists of 441 BibTeX files, 2,672,675
%%%                        lines, 205,289 entries, and 6,375
%%%                        <at>String{} abbreviations, occupying
%%%                        94.8MB of disk space.
%%%
%%%                        Numerous errors in the sources noted above
%%%                        have been corrected.  Spelling has been
%%%                        verified with the UNIX spell and GNU ispell
%%%                        programs using the exception dictionary
%%%                        stored in the companion file with extension
%%%                        .sok.
%%%
%%%                        BibTeX citation tags are uniformly chosen as
%%%                        name:year:abbrev, where name is the family
%%%                        name of the first author or editor, year is a
%%%                        4-digit number, and abbrev is a 3-letter
%%%                        condensation of important title
%%%                        words. Citation tags were automatically
%%%                        generated by software developed for the
%%%                        BibNet Project.
%%%
%%%                        In this bibliography, entries are sorted
%%%                        first by ascending year, and within each
%%%                        year, alphabetically by author or editor,
%%%                        and then, if necessary, by the 3-letter
%%%                        abbreviation at the end of the BibTeX
%%%                        citation tag, using the bibsort -byyear
%%%                        utility.  Year order has been chosen to
%%%                        make it easier to identify the most recent
%%%                        work.
%%%
%%%                        The checksum field above contains a CRC-16
%%%                        checksum as the first value, followed by the
%%%                        equivalent of the standard UNIX wc (word
%%%                        count) utility output of lines, words, and
%%%                        characters.  This is produced by Robert
%%%                        Solovay's checksum utility.",
%%%  }
%%% ====================================================================

@Preamble{"\input bibnames.sty " #
          "\input path.sty " #
          "\hyphenation{}"
}

%%% ====================================================================
%%% Acknowledgement abbreviations:

@String{ack-nhfb = "Nelson H. F. Beebe,
                    University of Utah,
                    Department of Mathematics, 110 LCB,
                    155 S 1400 E RM 233,
                    Salt Lake City, UT 84112-0090, USA,
                    Tel: +1 801 581 5254,
                    FAX: +1 801 581 4148,
                    e-mail: \path|beebe@math.utah.edu|,
                            \path|beebe@acm.org|,
                            \path|beebe@computer.org| (Internet),
                    URL: \path|http://www.math.utah.edu/~beebe/|"}

%%% ====================================================================
%%% Journal abbreviations:

@String{j-AUSTRALIAN-COMP-SCI-COMM = "Australian Computer Science
                                  Communications"}

@String{j-BYTE                  = "Byte Magazine"}

@String{j-COMP-EDU-J            = "Computers in education journal"}

@String{j-COMPUTER              = "Computer"}

@String{j-EUUG-NEWSLETTER       = "European UNIX Systems User Group, EUUG
                                  Newsletter"}

@String{j-IEEE-MICRO            = "IEEE Micro"}

@String{j-J-KOREA-INFO-SCI-SOCIETY = "Journal of the Korea Information Science
                                  Society = Chongbo Kwahakhoe nonmunji"}

@String{j-J-SYST-SOFTW          = "The Journal of Systems and Software"}

@String{j-JERIC                 = "ACM Journal on Educational Resources in
                                  Computing (JERIC)"}

@String{j-LOGIN                 = ";login: the USENIX Association newsletter"}

@String{j-MICROPROC-MICROPROG   = "Microprocessing and Microprogramming"}

@String{j-OPER-SYS-REV          = "Operating Systems Review"}

@String{j-SIGADA-LETTERS        = "ACM SIGADA Ada Letters"}

@String{j-SIGCSE                = "SIGCSE Bulletin (ACM Special Interest Group
                                  on Computer Science Education)"}

%%% ====================================================================
%%% Publisher abbreviations:

@String{pub-ACM                 = "ACM Press"}
@String{pub-ACM:adr             = "New York, NY 10036, USA"}

@String{pub-EUROPEN             = "EurOpen"}
@String{pub-EUROPEN:adr         = "Buntingford, Herts, UK"}

@String{pub-EUUG                = "European UNIX Users Group"}
@String{pub-EUUG:adr            = "Buntingford, Herts, UK"}

@String{pub-IEEE                = "IEEE Computer Society Press"}
@String{pub-IEEE:adr            = "1109 Spring Street, Suite 300, Silver
                                  Spring, MD 20910, USA"}

@String{pub-NIST                = "National Institute for Standards and
                                  Technology"}
@String{pub-NIST:adr            = "Gaithersburg, MD, USA"}

@String{pub-PEARSON-PH          = "Pearson Pren{\-}tice Hall"}
@String{pub-PEARSON-PH:adr      = "Upper Saddle River, NJ 07458, USA"}

@String{pub-PH                  = "Pren{\-}tice-Hall"}
@String{pub-PH:adr              = "Englewood Cliffs, NJ 07632, USA"}

@String{pub-SV                  = "Springer-Verlag Inc."}
@String{pub-SV:adr              = "New York, NY, USA"}

%%% ====================================================================
%%% Series abbreviations:

@String{ser-LNCS                = "Lecture Notes in Computer Science"}

%%% ====================================================================
%%% Bibliography entries:

@Article{Tanenbaum:1987:MAU,
  author =       "Andrew S. Tanenbaum",
  title =        "{MINIX}: {A UNIX} Clone with Source Code for the {IBM
                 PC}",
  journal =      j-LOGIN,
  volume =       "12",
  number =       "2",
  pages =        "3--9",
  month =        mar,
  year =         "1987",
  ISSN =         "1044-6397",
  bibdate =      "Sat May 4 19:58:57 1996",
  bibsource =    "Misc/usenix.bib",
}

@Misc{Tanenbaum:1987:MBSa,
  author =       "Andrew S. Tanenbaum",
  title =        "{Minix} binaries and sources for {512K IBM PC-AT}'s",
  publisher =    pub-PH,
  address =      pub-PH:adr,
  edition =      "Version 1.2",
  year =         "1987",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  note =         "6 computer disks.",
  series =       "Prentice-Hall software series",
  acknowledgement = ack-nhfb,
  annote =       "Title from disk label. Reference manual has title and
                 copyright date: Minix for the IBM PC, XT, and AT /
                 Andrew S. Tanenbaum. Englewood Cliffs, NJ:
                 Prentice-Hall, c1988. Boot diskette -- Root file system
                 -- /USR -- /USER -- Kernal, MM, FS, H, and LIB sources
                 -- Tools -- Include and commands sources. System
                 requirements: IBM PC-AT; 512K RAM.",
  keywords =     "IBM microcomputers -- Programming.; MINIX (Computer
                 operating system)",
}

@Misc{Tanenbaum:1987:MBSb,
  author =       "Andrew S. Tanenbaum",
  title =        "{Minix} binaries and sources for {640K IBM PC}'s",
  publisher =    pub-PH,
  address =      pub-PH:adr,
  edition =      "Version 1.2",
  year =         "1987",
  ISBN =         "0-13-583873-8",
  LCCN =         "????",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  note =         "9 computer disks.",
  series =       "Prentice-Hall software series",
  acknowledgement = ack-nhfb,
  annote =       "Title from disk label. Boot diskette -- Root file
                 system -- /USR -- /USER -- Kernal and H sources -- LS
                 and LIB sources -- MM and tools sources -- Include and
                 commands sources -- Commands sources (part 2). System
                 requirements: IBM PC; 640K RAM.",
}

@Article{Tanenbaum:1987:MUC,
  author =       "Andrew S. Tanenbaum",
  title =        "{MINIX}: {A} {UNIX} Clone with Source Code for the
                 {IBM PC}",
  journal =      j-LOGIN,
  volume =       "12",
  number =       "2",
  pages =        "3--9",
  month =        mar # "\slash " # apr,
  year =         "1987",
  ISSN =         "1044-6397",
  bibdate =      "Tue Feb 20 15:42:13 MST 1996",
  bibsource =    "ftp://ftp.uu.net/library/bibliography",
  affiliation =  "Vrije Universiteit",
}

@Book{Tanenbaum:1987:OSD,
  author =       "A. S. Tanenbaum",
  title =        "Operating Systems: Design and Implementation",
  publisher =    pub-PH,
  address =      pub-PH:adr,
  year =         "1987",
  ISBN =         "0-13-637331-3",
  bibdate =      "Sat May 04 19:58:57 1996",
  bibsource =    "Misc/TUBScsd/1987.bib",
  annote =       "Praxisorientierte, gute Darstellung. Ein
                 vollstaendiges, Unix - aehnliches Betriebssystem -
                 Minix - wird vollstaendig im Quellcode angegeben.",
  descriptor =   "Client, Datei, Dateiverwaltung, Dialoggeraet,
                 Parallel, Prozessorvergabe, Server, Verklemmung,
                 Virtueller Speicher, Ein/Ausgabe, Prozess,
                 Speicherverwaltung, Synchronisation, Unix,
                 Betriebssystem",
}

@Article{Tanenbaum:1987:UCS,
  author =       "Andrew S. Tanenbaum",
  title =        "A {UNIX} clone with source code for operating systems
                 courses",
  journal =      j-OPER-SYS-REV,
  volume =       "21",
  number =       "1",
  pages =        "20--29",
  month =        jan,
  year =         "1987",
  CODEN =        "OSRED8",
  ISSN =         "0163-5980",
  bibdate =      "Sat Aug 26 08:55:35 MDT 2006",
  bibsource =    "http://portal.acm.org/",
  keywords =     "MINIX",
  acknowledgement = ack-nhfb,
}

@MastersThesis{Cushing:1988:IMC,
  author =       "David Bruce Cushing",
  title =        "The Implementation of multicast communication in the
                 {MINIX} operating system kernel",
  type =         "Thesis ({M.Comp.Sc.})",
  school =       "School of Computer Science, Technical University of
                 Nova Scotia",
  address =      "Halifax, NS, Canada",
  pages =        "viii + 119",
  year =         "1988",
  bibdate =      "Wed Apr 12 06:03:19 2006",
  acknowledgement = ack-nhfb,
}

@InProceedings{Fugini:1988:EUP,
  author =       "M. G. Fugini and R. Bellinzona and G. Martella",
  title =        "An extension to {Unix} protection mechanisms to
                 support flexible resource sharing and discretionary
                 authorization",
  crossref =     "IEEE:1988:AIT",
  pages =        "663--671",
  year =         "1988",
  bibdate =      "Mon Sep 30 17:21:43 MDT 1996",
  abstract =     "An enhancement is proposed to the standard Unix
                 protection mechanisms to provide more flexible resource
                 sharing facilities in Unix-based environments. The Unix
                 basic privileges, and the concepts of ownership and
                 user group are enlarged to allow for selective resource
                 sharing on the basis of a finer protection granularity.
                 The concepts and the tools for system administration
                 are extended to multiple authorizers, each responsible
                 for a set of system objects and for a community of
                 users. The authors present the tools for specifying the
                 resource sharing policies: a specification language,
                 and an environment for management and analysis of these
                 specifications. The implementation of the protection
                 mechanisms that support the described extensions is
                 illustrated; the approach is based on the
                 restructuration of the kernel of the Unix-like Minix
                 system.",
  acknowledgement = ack-nhfb,
  affiliation =  "Brescia Univ., Italy",
  classification = "C6120 (File organisation); C6130 (Data handling
                 techniques); C6150J (Operating systems)",
  keywords =     "Discretionary authorization; Finer protection
                 granularity; Flexible resource sharing facilities;
                 Multiple authorizers; Ownership; Resource sharing
                 policies; Selective resource sharing; Specification
                 language; Standard Unix protection mechanisms; System
                 administration; System objects; Unix basic privileges;
                 Unix-based environments; Unix-like Minix system; User
                 group; access control; resource allocation; security of data;
                 storage allocation; Unix; discretionary authorization;
                 standard Unix protection mechanisms; flexible resource
                 sharing facilities; Unix-based environments; Unix basic
                 privileges; ownership; user group; selective resource
                 sharing; finer protection granularity; system
                 administration; multiple authorizers; system objects;
                 resource sharing policies; specification language;
                 Unix-like Minix system",
  thesaurus =    "Access control; Resource allocation; Security of data;
                 Storage allocation; Unix",
}

@Article{Koo:1988:SSM,
  author =       "Yong Wan Koo and Young Chan Kim",
  title =        "A study on the scheduling mechanism for real time
                 system",
  journal =      j-J-KOREA-INFO-SCI-SOCIETY,
  volume =       "15",
  number =       "3",
  pages =        "158--170",
  month =        jun,
  year =         "1988",
  CODEN =        "HJKHDC",
  ISSN =         "0258-9125",
  bibdate =      "Mon Sep 30 17:55:16 MDT 1996",
  abstract =     "Preemptive priority based scheduling policy, which is
                 based upon its CPU processing time in order to use CPU
                 impartially, doesn't guarantee the satisfiable response
                 time transaction. This paper presents the preemptive
                 priority based deadline scheduling policy according to
                 the priority of processes being determined by its
                 urgency, so that it may be suitable for real time
                 processes, that is, it may enable the scheduler to
                 guarantee good response time and to process deadline
                 jobs. Two timers supporting deadline scheduler with
                 real time clock interrupt were implemented in MINIX O.S
                 under IBM-PC/AT.",
  acknowledgement = ack-nhfb,
  classification = "C6150J (Operating systems)",
  keywords =     "Deadline scheduler; IBM-PC/AT; MINIX O.S; Real time
                 clock interrupt; Real time system; Scheduling
                 mechanism; Timers",
  language =     "Korean",
  pubcountry =   "South Korea",
  thesaurus =    "Operating systems [computers]; Real-time systems;
                 Scheduling",
}

@Article{Li:1988:SUI,
  author =       "Lianzhi Li and Fushun Guo",
  title =        "The structure and user-interface of {MINIX}",
  journal =      "Mini-Micro Systems",
  volume =       "9",
  number =       "10",
  pages =        "7--10, 15",
  year =         "1988",
  CODEN =        "XWJXEH",
  ISSN =         "0364-9342",
  bibdate =      "Mon Sep 30 17:55:16 MDT 1996",
  abstract =     "The MINIX is a mini-Unix operating system for the IBM
                 PC/AT and its compatibles. The authors introduce the
                 internal structure of MINIX, which is divided into four
                 main parts: process management, I/O management, storage
                 management and document management. The user interface
                 and commands of MINIX are also described.",
  acknowledgement = ack-nhfb,
  classification = "C6150J (Operating systems)",
  keywords =     "Document management; I/O management; IBM PC/AT;
                 Mini-Unix operating system; MINIX; Process management;
                 Storage management; Structure; User-interface",
  language =     "Chinese",
  pubcountry =   "China",
  thesaurus =    "Operating systems [computers]",
}

@InProceedings{Maginnis:1988:DCT,
  author =       "P. Tobin Maginnis",
  title =        "Design considerations for the transformation of
                 {MINIX} into a distributed operating system",
  crossref =     "ACM:1988:PFS",
  pages =        "608--615",
  DOI =          "http://doi.acm.org/10.1145/322609.323135",
  year =         "1988",
  bibdate =      "Mon Sep 30 17:21:43 MDT 1996",
  abstract =     "MINIX is a version seven UNIX compatible operating
                 system written for the Intel 8088 CPU and IBM-PC
                 circuit package. MINIX is being transformed into a
                 distributed operating system by adding four components
                 to the basic operating system. These include an
                 extended IPC service, network service manager, resource
                 manager, and communication manager. Design
                 considerations include a definition of distributed
                 operating systems (DOSs), a description of existing
                 DOSs, a description of operating system architectural
                 components which add DOS functionality, a plan for the
                 placement of these components within the MINIX
                 environment, an explanation of the types of DOS
                 communication, and the implementation of DOS
                 communication.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. of Comput. Inf. Sci., Mississippi Univ.,
                 University, MS, USA",
  classification = "C5620 (Computer networks and techniques); C6150J
                 (Operating systems)",
  keywords =     "Communication manager; Distributed operating system;
                 DOS communication; DOS functionality; IBM-PC; Intel
                 8088 CPU; IPC service, network service manager; MINIX;
                 Resource manager; UNIX compatible operating system",
  thesaurus =    "Computer networks; Network operating systems",
}

@MastersThesis{Naniwadekar:1988:ACD,
  author =       "Devendra Vithal Naniwadekar",
  title =        "Approximations to creating a distributed minix
                 operating system",
  type =         "Thesis (M.S.)",
  school =       "University of Mississippi",
  address =      "Oxford, MS, USA",
  pages =        "v + 89",
  year =         "1988",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  acknowledgement = ack-nhfb,
}

@InProceedings{Naniwadekar:1988:IRM,
  author =       "Devendra Naniwadekar",
  title =        "Implementation of a resource manager for distributed
                 {MINIX}",
  crossref =     "ACM:1988:PFS",
  pages =        "686--686",
  year =         "1988",
  DOI =          "http://doi.acm.org/10.1145/322609.323153",
  bibdate =      "Sat Aug 26 07:01:46 2006",
  abstract =     "MINIX is an operating system written by Andrew S.
                 Tanenbaum and is very much like UNIX Version 7. It uses
                 the same system calls and even the shell is
                 functionally identical to that of UNIX. It is written
                 in C language and Intel 8088 assembly language. MINIX
                 has all the functionalities of an operating system
                 namely, process manager, I/O manager, device driver,
                 state saver, inter-process communication, memory
                 manager and file manager, user interface, utilities and
                 timing service. MINIX, being a modular operating
                 system, is easy to understand and modify and it is
                 distributed with source code. Thus, MINIX can be
                 identified as a suitable candidate for transforming it
                 into a distributed operating system (DOS). To transform
                 MINIX into a DOS, a kernel process called NET is
                 proposed to be added. This will be logically located at
                 the same hierarchical level as the memory manager and
                 the file system. NET will be composed of a
                 communication manager (CM), a network manager(NM), a
                 resource manager (RM) and extended IPC. These managers
                 will be transparent to users but will offer
                 functionality of a DOS. At present, IPC in MINIX takes
                 place using messages stored in shared buffers. This is
                 due to the restricted address space of the Intel 8088
                 microprocessor. User requests are carried out by
                 sending messages either to the memory manager or the
                 file system which in turn send messages to the system
                 and device driver processes and upon successful
                 completion of the task, return a message to the user
                 via the same route. The resource manager is an
                 essential component of a DOS. As the name suggests, it
                 manages the resources of a system. It maintains an up
                 to date version of the system's resources and also
                 keeps track of the status of other systems in the
                 network. This is achieved by maintaining a global
                 kernel data structure called the System State Table
                 (SST). Entries in the SST include logical unit number
                 of the various hosts, their logical names, physical
                 station addresses, number of processes running, percent
                 of idle time, available memory, number of users, number
                 of open virtual circuits and an 'altruism' factor
                 indicating willingness to accept remote processes for
                 running. The SST may be accessed by the NM to map
                 logical host names to numbers or physical
                 addresses. The resource manager may be accessed by
                 higher level components such as the user interface,
                 linking loader or by advanced programmers by making
                 resource manager service calls. In this way, the user
                 interface and parallel loader query the RM to discover
                 the number of available processors, willingness to
                 accept remote requests, etc. The resource manager
                 employs two types of messages: 1) messages are sent at
                 boot time to all hosts announcing the present status of
                 the local system including the boot version, and 2) a
                 message is sent after each time-out interval. If a
                 message is not received from a remote host after two
                 time-out intervals, the remote node is presumed to be
                 dead. The CM interacts with RM concerning the status
                 information. This status information, piggy-backed onto
                 message frames, is attached to incoming and outgoing
                 frames. On incoming frames, the status information is
                 placed in a temporary buffer for analysis by the
                 RM. The RM also places local host status information in
                 a second temporary buffer area so that the CM may
                 piggyback the status data onto outgoing frames.",
  acknowledgement = ack-nhfb,
}

@InProceedings{Navaux:1988:MA,
  author =       "P. O. A. Navaux and T. S. Cirano and A. S. Carissimi
                 and J. C. Netto",
  title =        "{M3P}-project architecture",
  crossref =     "Silveira:1988:ADV",
  pages =        "234--244",
  year =         "1988",
  bibdate =      "Mon Sep 30 17:55:16 MDT 1996",
  abstract =     "Describes the M3P machine, minix-multimicroprocessor
                 project, giving its architecture, the concepts about
                 interprocessor cooperation and one overview of Minix,
                 an Unix-like system.",
  acknowledgement = ack-nhfb,
  affiliation =  "Univ. Federal do Rio Grande do Sul, Brazil",
  classification = "C5220 (Computer architecture); C5440 (Multiprocessor
                 systems and techniques)",
  keywords =     "Architecture; Interprocessor cooperation; M3P machine;
                 Minix; Minix-multimicroprocessor project; Unix-like
                 system",
  language =     "Portuguese",
  thesaurus =    "Computer architecture; Multiprocessing systems",
}

@InProceedings{Ramesh:1988:DDM,
  author =       "K. S. Ramesh",
  title =        "Design and development of {MINIX} distributed
                 operating system",
  crossref =     "ACM:1988:PFS",
  pages =        "685--685",
  year =         "1988",
  DOI =          "http://doi.acm.org/10.1145/322609.323152",
  bibdate =      "Sat Aug 26 07:04:36 2006",
  abstract =     "Students and faculty of University of Mississippi are
                 in the process of transforming MINIX into a truly
                 distributed operating system. MINIX is a complete
                 operating system and has all the components such as 1)
                 Process manager, 2) Memory manager, 3) File manager, 4)
                 Device drivers, 5) Inter process communication, 6) Real
                 time clock, 7) General I/O, 8) Utilities, 9) State
                 saver and 10) Timing service. Unlike major operating
                 systems which are monolithic in structure, MINIX is
                 itself a collection of processes that communicate with
                 each other through message passing. The design of the
                 MINIX distributed system involves the addition of a
                 server process called NET to the existing operating
                 system. The functionality of the NET server can be
                 broadly classified into four major routines. They are:
                 1) the communication manager which transmits and
                 receives the frames from the remote hosts through the
                 HSLAN driver installed in kernel. It also performs the
                 error detection and correction function and maintains
                 the transmission protocol. 2) The interprocess
                 communication manager which maps message buffer into
                 the fixed size frames to be transmitted by the
                 communication manager. It also has primitives such as
                 request, reply, flow controlled send to initiate and
                 maintain a virtual circuit with the remote system. 3)
                 The resource manager which is employed as a child
                 process of the NET server process holds the status of
                 the network. It maintains information such as remote
                 logical address, number of process running in each
                 system, resources available at each site etc. 4)
                 Finally, the network service manager which services the
                 remote file request from the local process and also the
                 local file request from the remote host. Addition of
                 these components in the NET process would enhance the
                 capabilities of the operating system and provide users
                 access to remote file systems and remote resources and
                 also enable users to exploit multiprocessor
                 capabilities with the help of well defined algorithms
                 and tools. To accomplish the transformation of MINIX
                 the following changes have been made to incorporate the
                 NET process. Modify a system tool called Build which
                 patches the independent files bootblock, kernel, memory
                 manager, file manager and init into the memory resident
                 portion of MINIX. Build was modified so that one more
                 component NET could be added to the MINIX image. These
                 were non-trivial changes because in addition to
                 combining the object module Build also puts the CS \&
                 DS for all these components at the beginning of kernel
                 data space, so that kernel can load their memory maps
                 in the proc table during system initialization.
                 Increase the storage size in the kernel data space
                 where the CS \& DS of all the components are stored so
                 that Build can install the CS \& DS of NET. Assign and
                 make an entry into the memory manager proc table so
                 that NET could make system calls to the memory manager.
                 Assign an entry into the file system proc table and
                 assign the working directory, real uid, effective uid
                 for the NET process. The NET process like other
                 processes is designed such that it will continuously
                 wait for and respond to messages from other processes.
                 Initially, it will be blocked waiting to receive a
                 message from any process. Modify the dump routine to
                 display the status of the NET process. Finally, the NET
                 process is designed to continuously wait for its
                 service request messages from other processes. The NET
                 process is structured in such a way that the type of
                 request is resolved and switched into a table of
                 service routines. On accomplishing the service request
                 the process loops back to receive the next request,
                 thus providing the foundation for the development of
                 the internal NET routines discussed above.",
  acknowledgement = ack-nhfb,
}

@InProceedings{Roskos:1988:MSP,
  author =       "J. Eric Roskos",
  title =        "{MINIX} security policy model",
  crossref =     "IEEE:1988:FAC",
  volume =       "4",
  publisher =    pub-IEEE,
  address =      pub-IEEE:adr,
  pages =        "393--399",
  year =         "1988",
  ISBN =         "0-8186-0895-1",
  DOI =          "http://dx.doi.org/10.1109/ACSAC.1988.113338 ",
  LCCN =         "????",
  bibdate =      "Fri May 24 09:57:34 MDT 1996",
  bibsource =    "Compendex database",
  note =         "Available from IEEE Service Cent (catalog no.
                 88CH2619-5). Piscataway, NJ, USA.",
  abstract =     "The author describes how the Bell-La Padula model
                 might be applied to the current, unrated Minix
                 operating system. Also discussed are security issues
                 pertaining to inherited accesses and the method used to
                 characterize the Minix file permissions in terms of the
                 more general access matrix model.",
  acknowledgement = ack-nhfb,
  affiliation =  "Inst for Defense Anal, Alexandria, VA, USA",
  classification = "723; C6150J (Operating systems)",
  conference =   "Fourth Aerospace Computer Security Applications
                 Conference",
  conferenceyear = "1988",
  keywords =     "Access matrix model; Bell-La Padula model; Bell-La
                 Padula Model; Computer Operating Systems; Computer
                 Systems, Digital--Security Systems; Data
                 Processing--Security of Data; File Permission; General
                 Access Matrix Model; Inherited accesses; Minix file
                 permissions; Minix operating system; Minix Operating
                 System; Minix security policy model; Minix Security
                 Policy Model; Security Systems",
  meetingabr =   "Fourth Aerosp Comput Secur Appl Conf",
  meetingaddress = "Orlando, FL, USA",
  meetingdate =  "Dec 12--16 1988",
  meetingdate2 = "1988 Dec 12--16",
  sponsor =      "IEEE, Computer Society, Los Alamitos, CA, USA",
  thesaurus =    "Operating systems [computers]; Security of data",
}

@Book{Tanenbaum:1988:MAS,
  author =       "Andrew S. Tanenbaum and Johan W. Stevenson and Jost
                 Muller",
  title =        "{MINIX} for the {ATARI} {ST} and {MINIX} manual for
                 the {ATARI} {ST}",
  publisher =    pub-PH,
  address =      pub-PH:adr,
  edition =      "Version 1.1.",
  year =         "1988",
  ISBN =         "0-13-584392-8 (disks), 0-13-584434-7 (manual)",
  LCCN =         "QA76.76.O63",
  bibdate =      "Mon Sep 30 17:55:16 MDT 1996",
  note =         "9 computer disks.",
  abstract =     "MINIX is a new operating system that is similar to
                 Version 7 of the UNIX operating system. MINIX is widely
                 used on the IBM PC, and has now been ported to the
                 Atari ST and Mega ST. Unlike the UNIX system itself,
                 MINIX comes complete with all the source code. MINIX
                 features: a system call compatible with V7 UNIX (except
                 for a few very minor calls); a Kernighan and Ritchie
                 compatible C compiler; a shell that is functionally
                 identical to the Bourne shell; full multiprogramming
                 (fork+exec; background jobs in shell: cc file.c and );
                 a full screen editor inspired by emacs (modeless,
                 autoinsert, etc.); over 60 popular utilities (cat, cp,
                 grep, ls, make, mount, sort, etc.); and over 100
                 library procedures (atoi, fork, malloc, stdio, strcmp,
                 etc.) It works with floppy-only systems or with hard
                 disk systems. A full operating system source code is
                 included, and the source code for all utilities (except
                 the C compiler) is also included.",
  acknowledgement = ack-nhfb,
  annote =       "Title from disk label. An operating system for small
                 computer systems, inspired by V7 of the UNIX operating
                 system. It has a hierarchical file system, supports
                 full multitasking, and has a command interpreter,
                 called the shell, similar to the Bourne shell on UNIX.
                 Comes with 100 utility programs, nearly all of which
                 are similar to UNIX programs. System requirements:
                 Amiga ST; 512K RAM; TOS. Atari ST",
  classification = "C6150J (Operating systems)",
  keywords =     "Atari ST; Bourne shell; Emacs; Floppy disk systems;
                 Full screen editor; Hard disk systems; Kernighan and
                 Ritchie compatible C compiler; Library procedures; Mega
                 ST; MINIX; Multiprogramming; Operating system;
                 Operating systems (Computers) -- Software.; Source
                 code; System call; UNIX; Utilities",
  thesaurus =    "Atari computers; Microcomputer applications; Unix;
                 User manuals",
}

@Book{Tanenbaum:1988:MIPa,
  author =       "Andrew S. Tanenbaum",
  title =        "{MINIX} for the {IBM PC}, {XT}, and {AT}",
  publisher =    pub-PH,
  address =      pub-PH:adr,
  pages =        "xv + 486",
  year =         "1988",
  ISBN =         "0-13-584400-2 (paperback)",
  LCCN =         "QA76.76.O63",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  series =       "Prentice-Hall software series",
  acknowledgement = ack-nhfb,
  keywords =     "IBM microcomputers -- Programming.; MINIX (Computer
                 operating system)",
}

@Misc{Tanenbaum:1988:MIPb,
  author =       "Andrew S. Tanenbaum",
  title =        "{Minix} 1.3 for the {IBM PC-AT}'s",
  publisher =    pub-PH,
  address =      pub-PH:adr,
  edition =      "Version 1.3.",
  year =         "1988",
  ISBN =         "0-13-583303-5",
  LCCN =         "????",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  note =         "5 computer disks.",
  series =       "Prentice-Hall software series",
  acknowledgement = ack-nhfb,
  annote =       "Title from disk label. Reference manual has title and
                 copyright date: Minix for the IBM PC, XT, and AT /
                 Andrew S. Tanenbaum. Englewood Cliffs, NJ:
                 Prentice-Hall, c1988. Boot diskette -- Root file system
                 -- Operating systems sources -- Commands sources.
                 System requirements: IBM PC-AT; 256K RAM.",
  keywords =     "IBM microcomputers -- Programming.; MINIX (Computer
                 operating system)",
}

@Book{Tanenbaum:1988:OSD,
  author =       "Andrew S. Tanenbaum",
  title =        "Operating System: Design and Implementation",
  publisher =    pub-PH,
  address =      pub-PH:adr,
  year =         "1988",
  ISBN =         "0-13-637331-3",
  bibdate =      "Sat May 4 19:58:57 1996",
  bibsource =    "Misc/TUBScsd.bib",
  annote =       "Alle Grundlegenden Prinzipien fuer das Design und die
                 Implementierung Werden Beschrieben. die Resultate
                 Werden Anhand der Unix-aehnlichen Implementierung Minix
                 Beschrieben, Wobei der C-quellcode Ebenfalls Teil des
                 Buches Ist.",
  descriptor =   "Betriebssystem",
}

@MastersThesis{Aas:1989:HMP,
  author =       "Gisle Aas",
  title =        "{HP-Minix}: portering av et operativsystem.
                 (Norwegian). [{HP-Minux}: Porting of an operating
                 system]",
  type =         "Hovedoppgave i datafag (Computer Science thesis)",
  school =       "Universitetet i Troms{\o}",
  address =      "Troms{\o}, Norway",
  pages =        "161",
  year =         "1989",
  bibdate =      "Wed Apr 12 05:58:18 2006",
  acknowledgement = ack-nhfb,
  language =     "Norwegian",
}

@Article{Durr:1989:MAS,
  author =       "C. L. Durr",
  title =        "Multis for the {Atari} {ST} (multi-user packages)",
  journal =      "Chip",
  month =        jul,
  year =         "1989",
  CODEN =        "CHIPDP",
  ISSN =         "0170-6632",
  bibdate =      "Mon Sep 30 17:55:16 MDT 1996",
  abstract =     "The author compares two software packages that allow
                 several users to share a PC and that can be run on an
                 Atari PC. The two are: Minix and OS-9/68000, both
                 needing a RAM of 1 Mbyte and diskette drive of 360-720
                 kbyte. The OS-9 costs 1600 DM and has a greater real
                 time performance than Minix. Minix costs 230 DM and
                 comes on nine 3.5' discs which include operating
                 system, utilities, C-compiler and source text. The
                 author liked Minix's compatibility with Unix v.7. He
                 describes how both packages are installed and used and
                 selects prints for comment.",
  acknowledgement = ack-nhfb,
  classification = "C6150J (Operating systems)",
  issue =        "no.7 p. 38-42",
  keywords =     "1 MB; Atari PC; Atari ST; C-compiler; Compatibility;
                 Minix; Multi-user packages; Operating system;
                 OS-9/68000; Real time performance; Software packages;
                 Source text; Unix v.7; Utilities",
  language =     "German",
  numericalindex = "Memory size 1.0E+06 Byte",
  pubcountry =   "West Germany",
  thesaurus =    "Atari computers; Multiprogramming; Software packages",
}

@InProceedings{Gammill:1989:DFS,
  author =       "R. Gammill and J. Hernes",
  title =        "A distributed file system for {MINIX}",
  crossref =     "Anonymous:1989:SPA",
  pages =        "151--160",
  year =         "1989",
  bibdate =      "Mon Sep 30 17:55:16 MDT 1996",
  abstract =     "The design and implementation of a distributed file
                 system for the MINIX operating system is described.
                 MINIX is a UNIX-like pedagogic operating system for
                 IBM-compatible personal computers, which was created by
                 Andrew S. Tanenbaum. Important features of MINIX are
                 described and reasons for its use in this project are
                 examined. One such reason is the authors' desire to use
                 it as the basis of a course on distributed systems and
                 networks.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. of Comput. Sci., North Dakota State Univ.,
                 Fargo, ND, USA",
  classification = "C6150J (Operating systems)",
  keywords =     "Course; Distributed file system; Distributed systems;
                 IBM-compatible personal computers; MINIX operating
                 system; Networks; UNIX-like pedagogic operating
                 system",
  thesaurus =    "Distributed processing; Operating systems [computers];
                 Unix",
}

@MastersThesis{Guha:1989:EMO,
  author =       "Amitava Guha",
  title =        "Enhancement of {Minix} operating system",
  type =         "Thesis (M.S.)",
  school =       "Department of Computer Science, Southern Illinois
                 University at Carbondale",
  address =      "Carbondale, IL, USA",
  pages =        "44",
  year =         "1989",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  acknowledgement = ack-nhfb,
}

@InProceedings{Gull:1989:MMH,
  author =       "A. Gull and S. K. Das",
  title =        "Memory management hardware: panacea or pain?",
  crossref =     "Anonymous:1989:UEC",
  pages =        "217--221",
  year =         "1989",
  bibdate =      "Mon Sep 30 17:53:27 MDT 1996",
  abstract =     "Computer manufacturers have flooded the bottom end of
                 the market with a diverse range of low budget hardware.
                 Although the processing power of these machines has
                 steadily increased, such workstations are typically
                 devoid of the expensive memory management hardware
                 often found on larger machines. The authors investigate
                 the difficulties of supporting Unix on such machines.
                 They draw examples from two separate reimplementations
                 of the MINIX operating system both of which support
                 efficient, if not secure, Unix-like processes without
                 the aid of memory management hardware.",
  acknowledgement = ack-nhfb,
  affiliation =  "City Univ., London, UK",
  classification = "C5430 (Microcomputers); C6120 (File organisation);
                 C6150J (Operating systems)",
  keywords =     "Low budget hardware; Memory management; MINIX
                 operating system; MINIX-ST; Processing power;
                 Reimplementations; STIX OS; Unix-like processes;
                 Workstations",
  thesaurus =    "Operating systems [computers]; Storage management;
                 Unix; Workstations",
}

@Article{Gull:1989:PMO,
  author =       "Aarron Gull and Sunil K. Das",
  title =        "A Port of the {MINIX} Operating System to the {Atari
                 ST}",
  journal =      j-EUUG-NEWSLETTER,
  volume =       "9",
  number =       "1",
  pages =        "2--14",
  month =        "Spring",
  year =         "1989",
  CODEN =        "EONLE8",
  ISSN =         "1011-4211",
  bibdate =      "Tue Feb 20 15:42:13 MST 1996",
  bibsource =    "ftp://ftp.uu.net/library/bibliography;
                 Misc/usenix.bib",
  affiliation =  "City University London",
}

@Article{Hays:1989:OSC,
  author =       "James H. Hays",
  title =        "An Operating Systems Course Using {Minix}",
  journal =      j-SIGCSE,
  volume =       "21",
  number =       "4",
  pages =        "11--12",
  day =          "1",
  month =        dec,
  year =         "1989",
  CODEN =        "SIGSD3",
  DOI =          "http://doi.acm.org/10.1145/74091.74093",
  ISSN =         "0097-8418",
  bibdate =      "Sat Aug 26 07:00:15 2006",
  bibsource =    "UnCover library database",
  acknowledgement = ack-nhfb,
}

@MastersThesis{Hernes:1989:DFS,
  author =       "Jeffrey Lee Hernes",
  title =        "A distributed file server for {MINIX}",
  type =         "Thesis (M.S.)",
  school =       "North Dakota State University",
  address =      "Fargo, ND, USA",
  pages =        "iv + 43",
  year =         "1989",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  series =       "Thesis / Computer Science, North Dakota State
                 University Thesis (North Dakota State University. Dept.
                 of Computer Science); 1989",
  acknowledgement = ack-nhfb,
  keywords =     "Computer networks.; Electronic data processing --
                 Distributed processing.; File organization (Computer
                 science)",
}

@MastersThesis{Kachel:1989:MMB,
  author =       "Timothy Paul Kachel",
  title =        "{MINNET}, a {MINIX} based broadcast network using
                 {RS232}",
  type =         "Thesis (M.S.)",
  school =       "North Dakota State University",
  address =      "Fargo, ND, USA",
  pages =        "iv + 67",
  year =         "1989",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  series =       "Thesis / Computer Science, North Dakota State
                 University Thesis (North Dakota State University. Dept.
                 of Computer Science); 1989",
  acknowledgement = ack-nhfb,
  keywords =     "Computer networks.; MINNET (Computer program)",
}

@MastersThesis{Kobylanski:1989:IPS,
  author =       "Stanley George Kobylanski",
  title =        "An implementation of process swapping in {MINIX} (a
                 message passing oriented operating system)",
  type =         "Thesis (M.S.)",
  school =       "Kansas State University",
  address =      "Manhattan, KS, USA",
  pages =        "vi + 63 + 59",
  year =         "1989",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  acknowledgement = ack-nhfb,
}

@Article{Anonymous:1990:AOS,
  author =       "Anonymous",
  title =        "Alternative Operating Systems, Part 5: {Unix} with a
                 Microscope: {Minix}, a low-cost {Unix}, runs on
                 ordinary personal computers",
  journal =      j-BYTE,
  volume =       "15",
  number =       "13",
  pages =        "345--346",
  month =        dec,
  year =         "1990",
  CODEN =        "BYTEDJ",
  ISSN =         "0360-5280",
  bibdate =      "Tue Jan 2 10:01:41 MST 1996",
  bibsource =    "Compendex database",
  abstract =     "In order to solve many software problems, the
                 operating system must be understood. UNIX is a
                 complicated operating system and a source license is
                 very expensive. Minix is an operating system that is
                 compatible with UNIX version 7. Xenix is a PC version
                 of UNIX which supports many commercially available
                 programs.",
  acknowledgement = ack-nhfb,
  classification = "722; 723",
  journalabr =   "Byte",
  keywords =     "Computer Operating Systems; Computer Software ---
                 Evaluation; Minix; UNIX; UNIX Version 7; Xenix",
}

@Article{Anonymous:1990:MCL,
  author =       "Anonymous",
  title =        "{MINIX}: a `{CLONIX}' for learning how to build
                 operating systems",
  journal =      "Novatica",
  volume =       "16",
  number =       "86",
  pages =        "79--82",
  year =         "1990",
  CODEN =        "NOVAEC",
  ISSN =         "0211-2124",
  bibdate =      "Mon Sep 30 17:21:43 MDT 1996",
  abstract =     "Describes the main features of MINIX (Mini-Unix),
                 designed by Tanenbaum to overcome AT and T restrictions
                 on using Unix code for educational purposes. MINIX,
                 well documented in Tanenbaum's book `Operating Systems:
                 Design and Implementation', runs on IBM PC XT, AT and
                 compatibles, and is indistinguishable to the user from
                 Unix 7, except for the absence of certain commands. The
                 article describes MINIX architecture, processes and
                 messages, device handles and devices, memory and file
                 management, and user processes.",
  acknowledgement = ack-nhfb,
  classification = "C0220 (Education and training); C6150J (Operating
                 systems)",
  keywords =     "IBM PC XT; MINIX; Tanenbaum; Unix; Unix 7",
  language =     "Spanish",
  pubcountry =   "Spain",
  thesaurus =    "Computer science education; IBM computers; Operating
                 systems [computers]; Software packages; Unix",
}

@Article{Chappelow:1990:DIS,
  author =       "Stephen W. Chappelow and Steven F. Ackerman and
                 Stephen J. Hartley",
  title =        "Design and implementation of a swapper for the {MINIX}
                 operating system",
  journal =      j-SIGCSE,
  volume =       "22",
  number =       "4",
  pages =        "55--59",
  month =        dec,
  year =         "1990",
  CODEN =        "SIGSD3",
  DOI =          "http://doi.acm.org/10.1145/122153.122165",
  ISSN =         "0097-8418",
  bibdate =      "Mon Sep 30 17:21:43 MDT 1996",
  abstract =     "The University of Vermont does not offer a course
                 which provides practical experience working with the
                 internals of operating systems. To remedy this, an
                 independent study course was undertaken during the
                 Spring 1989 semester which involved working with the
                 internals of a real operating system. The goal of the
                 project was to design and implement a major component
                 of an operating system known as the swapper. The basis
                 for the project was the MINIX operating system, which
                 is a message-passing operating system that runs on
                 microcomputers and whose user interface mimics Version
                 7 UNIX. The structure, algorithms, and implementation
                 of a swapper are analyzed in detail. Finally, the
                 practical value of the research experience is
                 discussed.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. of Comput. Sci. and Electr. Eng., Vermont Univ.,
                 Burlington, VT, USA",
  classification = "C0220 (Education and training); C6150J (Operating
                 systems)",
  keywords =     "Independent study course; Message-passing operating
                 system; MINIX operating system; Swapper; User
                 interface; Version 7 UNIX",
  thesaurus =    "Computer science education; Educational courses;
                 Operating systems [computers]",
}

@InProceedings{Donaldson:1990:TMW,
  author =       "A. L. Donaldson and J. W. {Taylor, Jr.} and D. M.
                 Chizmadia",
  title =        "Trusted {MINIX}: a worked example",
  crossref =     "Anonymous:1990:NCS",
  pages =        "307--317 (vol. 1)",
  year =         "1990",
  bibdate =      "Mon Sep 30 17:00:16 MDT 1996",
  abstract =     "The Trusted MINIX system is being developed to provide
                 a worked example of C2 security mechanisms and
                 assurances based on MINIX Version 1.5. MINIX is a small
                 UNIX-like operating system for the PC/AT workstation,
                 originally developed as a teaching tool for operating
                 systems classes. Although the computer system will
                 generally be used by only a single user at a time,
                 MINIX was designed for multi-user, multi-tasking
                 operation. From this perspective, the security
                 modifications required for Trusted MINIX are
                 essentially the same as for any multi-user system.
                 However, MINIX was designed with a more modular
                 internal structure than the monolithic UNIX kernel, and
                 this structure affects how security features are added
                 to MINIX. The paper gives an overview of the worked
                 example, both from historical and technical
                 perspectives.",
  acknowledgement = ack-nhfb,
  affiliation =  "Escom Corp., Oakton, VA, USA",
  classification = "C6130S (Data security); C6150J (Operating systems)",
  keywords =     "C2 security mechanisms; MINIX Version 1.5;
                 Multi-tasking; PC/AT workstation; TCSEC; Trusted MINIX
                 system; UNIX kernel; UNIX-like operating system; IBM computers; microcomputer applications; operating
                 systems (computers); security of data; Unix; TCSEC;
                 Trusted MINIX system; C2 security mechanisms; MINIX
                 Version 1.5; UNIX-like operating system; PC/AT
                 workstation; multi-tasking; UNIX kernel",
  thesaurus =    "IBM computers; Microcomputer applications; Operating
                 systems [computers]; Security of data; Unix",
}

@MastersThesis{Fresquez:1990:SIM,
  author =       "Vicente Fresquez",
  title =        "A swapping implementation for the {MINIX} operating
                 system",
  type =         "Thesis (M.S.)",
  school =       "University of Texas at El Paso",
  address =      "El Paso, TX, USA",
  pages =        "viii + 122",
  year =         "1990",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  acknowledgement = ack-nhfb,
  keywords =     "Operating systems (Computers); Virtual storage
                 (Computer science)",
}

@Article{Grehan:1990:MM,
  author =       "R. Grehan",
  title =        "Multitasking for the masses",
  journal =      j-BYTE,
  volume =       "15",
  number =       "2",
  pages =        "279--280, 282, 284, 286, 288, 334",
  month =        feb,
  year =         "1990",
  CODEN =        "BYTEDJ",
  ISSN =         "0360-5280",
  bibdate =      "Mon Sep 30 17:53:27 MDT 1996",
  abstract =     "The author describes multitasking and notes that there
                 are two major varieties of task or context switching:
                 preemptive and cooperative. There are various way to
                 bring multitasking to IBM PC/XT compatibles. The
                 spectrum ranges from complete multitasking environments
                 (some that try to maintain DOS compatibility, others
                 that give up the idea of wrestling with DOS and define
                 a completely new operating system) to multitasking
                 within the confines of a programming language. The
                 author briefly describes: DESQview; THeos 86;
                 Wendin-DOS; QNX; Minix; Xinu; F83; Mack 2; and Modula
                 2.",
  acknowledgement = ack-nhfb,
  classification = "C6150J (Operating systems)",
  keywords =     "DESQview; DOS compatibility; F83; Mack 2; Minix;
                 Modula 2; Multitasking environments; Operating system;
                 Programming language; QNX; THeos 86; Wendin-DOS; Xinu",
  thesaurus =    "IBM computers; Multiprogramming",
}

@Article{Hartley:1990:EMO,
  author =       "Stephen J. Hartley",
  title =        "Experience with {MINIX} in an operating systems lab",
  journal =      j-SIGCSE,
  volume =       "22",
  number =       "3",
  pages =        "34--38",
  month =        sep,
  year =         "1990",
  CODEN =        "SIGSD3",
  DOI =          "http://doi.acm.org/10.1145/101085.101096",
  ISSN =         "0097-8418",
  bibdate =      "Mon Sep 30 17:53:27 MDT 1996",
  abstract =     "Most standard undergraduate operating systems courses
                 teach theory and concepts, without exposing students to
                 the detailed internal operation or source code of an
                 actual operating system. A. S. Tanenbaum's MINIX
                 operating system (1987) is designed to give students
                 `hands-on' experience with the internals of an
                 operating system in order to illustrate the theory and
                 concepts. The use of MINIX in an operating systems
                 laboratory at the University of Vermont is described.
                 The paper gives an overview of the history and
                 structure of MINIX and describes some of the projects,
                 such as file locking, symbolic links, memory
                 compaction, modifying the CPU scheduler, and named
                 pipes, that have been used in an Operating Systems
                 Laboratory course at the University of Vermont.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. of Comput. Sci., Trinity Univ., San Antonio, TX,
                 USA",
  classification = "C0220 (Education and training); C6150J (Operating
                 systems)",
  keywords =     "CPU scheduler; File locking; IBM; Memory compaction;
                 MINIX; Operating systems; Symbolic links; Unix",
  thesaurus =    "Computer science education; Operating systems
                 [computers]",
}

@MastersThesis{Her:1990:ISR,
  author =       "Sheau-Chuen Her",
  title =        "Implement a simple remote procedure call model in
                 Minix",
  type =         "Thesis (M.S.)",
  school =       "California State University, Chico",
  address =      "Chico, CA, USA",
  pages =        "viii + 43",
  year =         "1990",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  acknowledgement = ack-nhfb,
  keywords =     "Computer networks.; Electronic data processing --
                 Distributed processing.; MINIX (Computer operating
                 system)",
}

@Article{Hoffman:1990:FSM,
  author =       "P. K. Hoffman and G. {de V. Smit}",
  title =        "A file server for a multi-transputer {Unix} system",
  journal =      "South African Computer Journal",
  month =        oct,
  year =         "1990",
  ISSN =         "1015-7999",
  bibdate =      "Mon Sep 30 17:21:43 MDT 1996",
  abstract =     "The DISTRIX operating system is a multiprocessor
                 UNIX-like distributed operating system. It consists of
                 a number of satellite processors connected to central
                 servers. The system is based on the MINIX operating
                 system, which is in turn based on UNIX Version 7. A
                 remote procedure calling interface is used in
                 conjunction with a system wide, end-to-end
                 communications protocol that connects satellite
                 processors to the central servers. A cached file server
                 provides access to all files and devices at the Unix
                 system call level. The design of the file server is
                 discussed in depth and the performance evaluated.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. of Comput. Sci., Cape Town Univ., Rondebosch,
                 South Africa",
  classification = "C5440 (Multiprocessor systems and techniques); C5690
                 (Other data communication equipment and techniques);
                 C6150J (Operating systems)",
  issue =        "no.3 p. 30-8",
  keywords =     "Cached file server; Central servers; DISTRIX operating
                 system; End-to-end communications protocol; File
                 server; MINIX operating system; Multi-transputer Unix
                 system; Multiprocessor UNIX-like distributed operating
                 system; Remote procedure calling interface; Satellite
                 processors; Unix system call level; UNIX Version 7",
  pubcountry =   "South Africa",
  thesaurus =    "File servers; Multiprocessing programs;
                 Multiprocessing systems; Transputers; Unix",
}

@Article{Koch:1990:MTS,
  author =       "L. Koch",
  title =        "{MINIX}\slash {THL} a training system for instruction
                 in operating systems",
  journal =      "Informatik, Informationen Reporte",
  year =         "1990",
  ISSN =         "0233-2582",
  bibdate =      "Mon Sep 30 17:21:43 MDT 1996",
  abstract =     "Explains the need to formulate training for UNIX.
                 MINIX/THL is defined as a UNIX system version 7 for
                 IBM-PC 8088, 8086, 80286 and ATARI ST for minimal
                 configuration demands. The items in the course, as
                 distributed by Prentice Hall, are described. Its
                 structural layers and memory are set out.",
  acknowledgement = ack-nhfb,
  affiliation =  "Tech. Hochschule Leipzig, Germany",
  classification = "C0220 (Education and training); C6150J (Operating
                 systems); C7810C (Computer-aided instruction)",
  issue =        "no.5 p. 159-65",
  keywords =     "ATARI ST; IBM-PC; Instruction; MINIX/THL; Operating
                 systems; Training system; UNIX",
  language =     "German",
  pubcountry =   "Germany",
  thesaurus =    "Computer aided instruction; Computer science
                 education; Operating systems [computers]; Training;
                 Unix",
}

@MastersThesis{Larribeau:1990:MDP,
  author =       "Scott Larribeau",
  title =        "The {MINIX} development project",
  type =         "Thesis (M.S.)",
  school =       "California Polytechnic State University",
  address =      "San Luis Obispo, CA, USA",
  pages =        "vi + 145",
  year =         "1990",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  acknowledgement = ack-nhfb,
  keywords =     "MINIX (Computer operating system); Operating systems
                 (Computers)",
}

@Article{Meumann:1990:MDD,
  author =       "M. D. Meumann and M. H. Rennhackkamp",
  title =        "{MINIX} for a distributed database system",
  journal =      "South African Computer Journal",
  month =        oct,
  year =         "1990",
  ISSN =         "1015-7999",
  bibdate =      "Mon Sep 30 17:21:43 MDT 1996",
  abstract =     "A user of a distributed database management system
                 must be able to access data which is stored on a number
                 of different sites and connected by a network, without
                 being aware of the physical data distribution. The
                 NRDNIX distributed database management system consists
                 of four major components, namely the presentation
                 manager, communication kernel, database manager and
                 network manager. The development of a distributed
                 system requires the addition of communication
                 capabilities to the supporting operating system. The
                 MINIX operating system could be considered as a
                 possible implementation environment. MINIX is based on
                 the client-server message passing model.
                 Architecturally it consists of a user layer, a server
                 layer and two kernel layers. A distributed database
                 implementation using MINIX can be configured as a
                 database server process, an extension to the existing
                 file system, a specialized database file system, a
                 network operating system process or a distributed
                 operating system process. MINIX has a number of
                 drawbacks, namely deadlock, alarm signals, deviations
                 from the message passing model and memory limitations.
                 The severity of the fundamental design flaws in MINIX
                 render it unusable for the implementation of a
                 distributed database management system.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. of Comput. Sci., Stellenbosch Univ., South
                 Africa",
  classification = "C6150J (Operating systems); C6160B (Distributed
                 DBMS)",
  issue =        "no.3 p. 23-9",
  keywords =     "Alarm signals; Client-server message passing model;
                 Communication capabilities; Communication kernel;
                 Database manager; Database server process; Deadlock;
                 Distributed database implementation; Distributed
                 database management system; Distributed operating
                 system process; Existing file system; Implementation
                 environment; Kernel layers; Memory limitations; MINIX
                 operating system; Network manager; Network operating
                 system process; NRDNIX distributed database management
                 system; Physical data distribution; Presentation
                 manager; Server layer; Specialized database file
                 system; User layer",
  pubcountry =   "South Africa",
  thesaurus =    "Distributed databases; Network operating systems;
                 Unix",
}

@Article{Rennhackkamp:1990:NDD,
  author =       "M. H. Rennhackkamp",
  title =        "The {NRDNIX} distributed database management system",
  journal =      "South African Computer Journal",
  month =        jan,
  year =         "1990",
  ISSN =         "1015-7999",
  bibdate =      "Mon Sep 30 17:53:27 MDT 1996",
  abstract =     "A distributed database management system must
                 facilitate integrated processing of data which is
                 physically distributed over a network of node
                 computers, while providing locality transparency. The
                 NRDNIX prototype has locality, logical and physical
                 independence as goals, together with adequate
                 availability and efficient throughput. It is
                 architecturally described in terms of an integration of
                 the ANSI/X3/SPARC database management system and the
                 ISO interconnection reference models. Communication
                 takes place via a broadcast network. The data is
                 horizontally distributed over the horizontally
                 controlled nodes, with duplication according to usage.
                 An adaption of the entity-relationship data model is
                 supported, with extensions to the relationships to
                 include update dependencies. Some supporting operating
                 systems have been considered, including MINIX. However,
                 a more feasible and popular implementation which is
                 being used is the development of device drivers for the
                 XENIX operating system, for example for the network
                 interface.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. of Comput. Sci., Stellenbosch Univ., South
                 Africa",
  classification = "B6210L (Computer communications); C5620W (Other
                 networks); C6150J (Operating systems); C6160B
                 (Distributed DBMS)",
  issue =        "no.1 p. 5-10",
  keywords =     "ANSI/X3/SPARC database management system; Broadcast
                 network; Device drivers; Distributed database
                 management system; Distributed DBMS; Duplication;
                 Entity-relationship data model; Horizontally controlled
                 nodes; Integrated processing; ISO interconnection
                 reference models; Locality transparency; Network
                 interface; Node computers; NRDNIX distributed database;
                 NRDNIX prototype; Physical independence; Supporting
                 operating systems; Throughput; Update dependencies;
                 XENIX operating system",
  pubcountry =   "South Africa",
  thesaurus =    "Computer networks; Distributed databases; Open
                 systems; Operating systems [computers]",
}

@MastersThesis{Sand:1990:IDF,
  author =       "Erik Martin Sand",
  title =        "Implementation of a distributed file system for
                 {MINIX}: a paper",
  type =         "Thesis (M.S.)",
  school =       "North Dakota State University",
  address =      "?Fargo, ND, USA",
  pages =        "v + 158",
  year =         "1990",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  acknowledgement = ack-nhfb,
  keywords =     "Computer networks.; Electronic data processing --
                 Distributed processing.; Operating systems (Computers)
                 -- Study and teaching (Higher)",
}

@MastersThesis{Tiwana:1990:ITI,
  author =       "Gurumukh Singh Tiwana",
  title =        "Implementation of {TCP\slash IP} in the {Minix}
                 operating system",
  type =         "Thesis (M.S.)",
  school =       "Southern Illinois University at Carbondale",
  address =      "Carbondale, IL, USA",
  pages =        "iii + 48 + [1]",
  year =         "1990",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  acknowledgement = ack-nhfb,
}

@Article{Yager:1990:AOS,
  author =       "T. Yager",
  title =        "Alternative operating systems. 5. {Unix} with a
                 microscope",
  journal =      j-BYTE,
  volume =       "15",
  number =       "13",
  pages =        "345--346",
  month =        dec,
  year =         "1990",
  CODEN =        "BYTEDJ",
  ISSN =         "0360-5280",
  bibdate =      "Mon Sep 30 17:21:43 MDT 1996",
  abstract =     "For pt.4 see ibid., vol.15, no.12, p.381-5, 1990.
                 Looks at Minix, a low cost version of Unix ideal for
                 study purposes. The author discusses how to install
                 Minix, and looks at its features from the users point
                 of view. He then looks at the source code, one of
                 Minix's strengths. The networking capabilities are also
                 considered.",
  acknowledgement = ack-nhfb,
  classification = "C6150J (Operating systems)",
  keywords =     "Minix; Networking capabilities; Operating systems;
                 Source code; Study",
  thesaurus =    "Operating systems [computers]; Unix",
}

@Article{Aguirre:1991:EMD,
  author =       "G. Aguirre and M. Errecalde and R. Guerrero and C.
                 Kavka and G. Leguizamon and M. Printista and R.
                 Gallard",
  title =        "Experiencing {Minix} as a didactical aid for operating
                 systems courses",
  journal =      j-OPER-SYS-REV,
  volume =       "25",
  number =       "3",
  pages =        "32--39",
  month =        jul,
  year =         "1991",
  CODEN =        "OSRED8",
  DOI =          "http://doi.acm.org/10.1145/122572.122575",
  ISSN =         "0163-5980",
  bibdate =      "Mon Sep 30 17:21:43 MDT 1996",
  abstract =     "Minix is a Unix clone operating system to be run on
                 IBM PCs and compatibles. The article describes the
                 results of some extensions on the internal work of
                 Minix as an exercise on operating systems design and
                 implementation that attempts to transfer that
                 experience to other groups of interest. The paper
                 intends to be interpreted as a report remarking what
                 kind of work was done having an extensively documented
                 copy of the source code of an operating system, taking
                 into account that the developers are undergraduates in
                 computer science.",
  acknowledgement = ack-nhfb,
  affiliation =  "Escuela de Inf., Univ. Nacional de San Luis,
                 Argentina",
  classification = "C0220 (Education and training); C6150J (Operating
                 systems)",
  keywords =     "Computer science; Didactical aid; IBM PCs; Minix;
                 Operating systems courses; Unix clone",
  thesaurus =    "Computer science education; Operating systems
                 [computers]; Unix",
}

@MastersThesis{Anglin:1991:AMP,
  author =       "Elizabeth Anglin",
  title =        "Addition of a message passing measure to {MINIX} ({A}
                 process-based operating system)",
  type =         "Thesis (M.S.)",
  school =       "Kansas State University",
  address =      "Manhattan, KS, USA",
  pages =        "iii + 90",
  year =         "1991",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  acknowledgement = ack-nhfb,
}

@InProceedings{Archer:1991:TRP,
  author =       "M. Archer and D. Frincke and K. Levitt",
  title =        "A template for rapid prototyping of operating
                 systems",
  crossref =     "Winkler:1991:SPS",
  pages =        "119--127",
  year =         "1991",
  bibdate =      "Mon Sep 30 17:21:43 MDT 1996",
  abstract =     "Rapid prototyping of many classes of systems can be
                 facilitated by starting from an executable template
                 specification appropriate to that class. A system
                 template serves several useful purposes. It organizes
                 ones thinking about the particular system to be
                 specified, and speeds the specification process by
                 pre-specifying structures and operations common to all
                 systems in a class. If executable, it can be developed
                 into a system prototype. Though beyond the scope of
                 this paper, it can organize proofs of properties of the
                 specification and its implementations by making it
                 possible to isolate the relevant proof obligations. The
                 authors templates have an additional property: they
                 classify sub-specifications according to `kinds' that
                 needs to be completed differently. The authors
                 illustrate rapid prototyping from a template for
                 operating systems, specifically showing how to obtain a
                 rapid prototype of the MINIX system. This approach may
                 also be useful for other classes of systems, such as
                 architectures.",
  acknowledgement = ack-nhfb,
  affiliation =  "Div. of Comput. Sci., California Univ., Davis, CA,
                 USA",
  classification = "C6110B (Software engineering techniques); C6150J
                 (Operating systems)",
  keywords =     "Executable template specification; MINIX system;
                 Operating systems; Proof obligations; Rapid
                 prototyping; Specification process;
                 Sub-specifications",
  thesaurus =    "Operating systems [computers]; Software prototyping",
}

@MastersThesis{Ference:1991:IMC,
  author =       "James M. Ference",
  title =        "Implementation of {Minix} on the {CT-MiniFrame}",
  type =         "Thesis (M.S.)",
  school =       "San Francisco State University",
  address =      "San Francisco, CA, USA",
  pages =        "xi + 380",
  year =         "1991",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  acknowledgement = ack-nhfb,
  keywords =     "Operating systems (Computers)",
}

@MastersThesis{Meier:1991:PM,
  author =       "Harald Meier",
  title =        "{Portierung von Minix auf 68000-rechner}",
  school =       "Technische Universit{\"{a}}t Braunschweig",
  address =      "Braunschweig, Germany",
  year =         "1991",
  bibdate =      "Fri Dec 18 11:04:47 1998",
  bibsource =    "Misc/TUBScsd.bib",
  descriptor =   "68000, Betriebssystem, Minix, Task",
}

@Article{Mull:1991:EST,
  author =       "A. J. Mull and P. T. Maginnis",
  title =        "Evolutionary steps toward a distributed operating
                 system: theory and implementation",
  journal =      j-OPER-SYS-REV,
  volume =       "25",
  number =       "4",
  pages =        "4--13",
  month =        oct,
  year =         "1991",
  CODEN =        "OSRED8",
  ISSN =         "0163-5980",
  bibdate =      "Mon Sep 30 17:13:18 MDT 1996",
  abstract =     "Generally speaking, distributed operating system (DOS)
                 designers seem more concerned with resource sharing,
                 global file system transparency, and implementation
                 methodology. The authors feel that a DOS may provide
                 the platform for linear speedup of applications if
                 performance considerations are given highest priority
                 in the design of the DOS. Work has been underway to
                 test the implementation of such a DOS design in the
                 MINIX environment.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. of Comput. and Inf. Sci., Mississippi Univ.,
                 University, MS, USA",
  classification = "C6150J (Operating systems); C6150N (Distributed
                 systems)",
  keywords =     "Distributed operating system; DOS; MINIX environment;
                 Performance",
  thesaurus =    "Network operating systems; Unix",
}

@MastersThesis{Smith:1991:RPU,
  author =       "Richard Smith",
  title =        "Real-time processing under the {MINIX} system",
  type =         "Thesis (M.Sc.)",
  publisher =    "National Library of Canada = Biblioth{\`e}que
                 nationale du Canada",
  school =       "University of Regina",
  address =      "Regina, Saskatchewan, Canada",
  year =         "1991",
  ISBN =         "0-315-70349-0",
  LCCN =         "????",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  note =         "2 microfiches. University Microfilms order no.
                 UMI00319115.",
  series =       "Canadian theses = Th{\`e}ses canadiennes",
  acknowledgement = ack-nhfb,
}

@Misc{Tanenbaum:1991:M,
  author =       "Andrew S. Tanenbaum",
  title =        "{MINIX}",
  publisher =    pub-PH,
  address =      pub-PH:adr,
  edition =      "Version 1.5.",
  year =         "1991",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  note =         "12 computer disks.",
  acknowledgement = ack-nhfb,
  annote =       "Title from disk label. Disk 1. PC boot disk -- Disk 2.
                 AT boot disk -- Disk 3. Universal boot disk -- Disk 4.
                 Root file system -- Disk 5. System binaries \#1 -- Disk
                 6. System binaries \#2 -- Disk 7. System binaries \#3
                 -- Disk 8. Operating system sources -- Disk 9. Commands
                 sources \#1 -- Disk 10. Commands sources \#2 -- Disk
                 11. Networking sources -- Disk 12. Boot disk with ST
                 506 hard disk. An operating system that is system call
                 compatible with Version 7 of UNIX operating system.
                 System requirements: IBM PC, XT or AT or PS/2 or
                 compatibles; 512K; 10 megabyte hard disk; monochrome
                 Hercules CBA or EGA. IBM PC. IBM AT. IBM XT. IBM
                 PS/2.",
  keywords =     "IBM microcomputers -- Programming.; MINIX (Computer
                 operating system)",
}

@Misc{Tanenbaum:1991:MAS,
  author =       "Andrew S. Tanenbaum",
  title =        "{MINIX} 1.5 for the {Atari ST} and {MegaST}",
  publisher =    pub-PH,
  address =      pub-PH:adr,
  year =         "1991",
  ISBN =         "0-13-585035-5",
  LCCN =         "QA76.76.O63",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  note =         "10 computer disks.",
  acknowledgement = ack-nhfb,
  annote =       "Title from disk label. Presents an operating system
                 that is system call compatible with version 7 of the
                 UNIX operating system. Includes the source code for the
                 complete system (over 125,000 lines of C), but does not
                 include the C compiler sources. System requirements:
                 Atari ST or MegaST; at least 1M; 720K disk drive. Atari
                 ST",
  keywords =     "Operating systems (Computers) -- Software.",
}

@Misc{Tanenbaum:1991:MIP,
  author =       "Andrew S. Tanenbaum",
  title =        "{MINIX} 1.5 5 1/4in for the {IBM PC}, {XT}, {AT}, 386
                 and {PS/2}",
  publisher =    pub-PH,
  address =      pub-PH:adr,
  edition =      "Version 1.5.",
  year =         "1991",
  ISBN =         "0-13-585076-2",
  LCCN =         "????",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  note =         "17 computer disks.",
  acknowledgement = ack-nhfb,
  annote =       "Title from disk label. Disk 1. PC boot disk -- Disk 2.
                 AT boot disk -- Disk 3. Universal boot disk -- Disk 4.
                 Root file system -- Disk 5. System binaries \#1 (/usr)
                 -- Disk 6. System binaries \#2 -- Disk 7. System
                 binaries \#3 -- Disk 8. System binaries \#4 -- Disk 9.
                 System binaries \# 5 -- Disk 10. System binaries \#6 --
                 Disk 11. Operating system sources -- Disk 12. Include,
                 lib, tools sources -- Disk 13. Commands sources \#1 --
                 Disk 14. Commands sources \#2 -- Disk 15. Commands
                 sources \#3 -- Disk 16. Commands sources \#4 -- Disk
                 17. Networking sources. An operating system that is
                 system call compatible with Version 7 of UNIX operating
                 system. System requirements: IBM PC, XT or AT, 386 or
                 PS/2 or compatibles.",
  keywords =     "IBM microcomputers -- Programming.; MINIX (Computer
                 operating system)",
}

@Article{Tsai:1991:ICM,
  author =       "Shang Rong Tsai and Ru Jing Chen",
  title =        "Interprocess communication with multicast support in
                 {DMINIX} operating system",
  journal =      j-MICROPROC-MICROPROG,
  volume =       "32",
  number =       "1-5",
  pages =        "145--152",
  month =        aug,
  year =         "1991",
  CODEN =        "MMICDT",
  ISSN =         "0165-6074",
  bibdate =      "Mon Sep 30 17:21:43 MDT 1996",
  note =         "17th EUROMICRO Symposium on Microprocessing and
                 Microprogramming. Hardware and Software Design
                 Automation.",
  abstract =     "DMINIX is a distributed operating system derived from
                 MINIX. The design and implementation of the
                 interprocess communication in the DMINIX system are
                 presented in this paper. The design goals of
                 interprocess communication in DMINIX are to supply a
                 highly reliable and network transparent environment for
                 system and user processes, and to make the designs and
                 developments of distributed software simpler. The
                 authors followed MINIX's rendezvous strategy in IPC
                 design to simplify the managements of system buffers.
                 Network transparency is very important in designing a
                 large-scale distributed system. With this property the
                 mobility of processes can be increased. Thus, in the
                 DMINIX system, a distributed program can be developed
                 on a single machine and then distributed on network of
                 computers once the program is logically correct. The
                 IPC was carefully designed such that it can easily
                 support more system services such as distributed file
                 services and process migration. The IPC also supports
                 multicast. The design of multicast support in the
                 DMINIX system will be discussed.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. of Electr. Eng., Nat. Cheng-Kung Univ., Tainan,
                 Taiwan",
  classification = "C5620 (Computer networks and techniques); C6150J
                 (Operating systems)",
  keywords =     "Distributed operating system; DMINIX operating system;
                 Interprocess communication; Multicast support; Network
                 transparency; System buffers",
  thesaurus =    "Network operating systems",
}

@InProceedings{Archer:1992:EOS,
  author =       "M. Archer and J. Bock and D. Frincke and K. Levitt",
  title =        "Effectiveness of operating system prototyping from a
                 template: application to {MINIX}",
  crossref =     "Kanapoulos:1992:SIW",
  pages =        "55--66",
  DOI =          "http://dx.doi.org/10.1109/IWRSP.1991.218623",
  year =         "1992",
  bibdate =      "Mon Sep 30 17:00:16 MDT 1996",
  abstract =     "In a previous paper, M. Archer et al. (1990) presented
                 a tool for the rapid prototyping of operating systems
                 based on an executable template operating system
                 specification. By extending the template specification,
                 a designer can generate a rapid prototype of a specific
                 operating system. The template specification consists
                 of sorts (object classes) arranged in a hierarchy of
                 three kinds, where the design decisions made in the
                 template for each kind are in some sense more general
                 than those made for its successor kind. The FASE (final
                 algebra specification and execution) system language
                 was used as the language for the specification. It is
                 the authors' belief that the SRM template is general
                 enough to be used as a basis for rapid prototyping
                 nearly any non-distributed operating system at the
                 system call level. It is important to test this belief,
                 and to show that the speed of prototype development and
                 the execution speed of a rapid prototype are great
                 enough for the development of a prototype to be useful
                 for testing the properties of a design. The authors
                 answer these questions, demonstrate the usefulness of
                 having a rapid prototype of an operating system, and
                 evaluate the template methodology in general.",
  acknowledgement = ack-nhfb,
  affiliation =  "Div. of Comput. Sci., California Univ., Davis, CA,
                 USA",
  classification = "C6110B (Software engineering techniques); C6150J
                 (Operating systems)",
  keywords =     "Executable template operating system specification;
                 FASE; Final algebra specification; MINIX;
                 Non-distributed operating system; Object classes;
                 Operating system prototyping; Rapid prototype; Specific
                 operating system; SRM template; System call level;
                 System language",
  thesaurus =    "Formal specification; Operating systems [computers];
                 Software prototyping; Specification languages",
}

@InProceedings{Louboutin:1992:IPM,
  author =       "S. R. Y. Louboutin",
  title =        "An implementation of a process migration mechanism
                 using {Minix}",
  crossref =     "Anonymous:1992:EUG",
  pages =        "213--224",
  year =         "1992",
  bibdate =      "Mon Sep 30 17:13:18 MDT 1996",
  abstract =     "An implementation of a process migration mechanism
                 realised on a network of PCs running under Minix is
                 described. The design of Minix incorporates modern
                 operating system design concepts (micro kernal, message
                 passing, client-server model) and insures a good
                 process encapsulation which is necessary for such a
                 realisation. Remote execution is achieved by using
                 surrogates or stub processes so that the lack of
                 integration of the platform can be overcome. Despite
                 the drawback of leaving a residual dependency on the
                 node where the migrating process has been created it
                 appears to be an appealing approach particularly
                 suitable to this system. The isomorphism between the
                 built-in message passing mechanism and the add-on
                 Amoeba communication protocol implementing RPC has been
                 extensively used to this purpose. Minix, even enhanced
                 with the Amoeba network communication facility is
                 certainly not a distributed system. However, it
                 features some of the properties which makes feasible
                 the realisation of a process migration facility.
                 Furthermore, Minix does not require an actual network
                 to develop and test networking software which can be
                 done on a standalone system. It therefore is a suitable
                 and inexpensive platform to conduct such experiments.",
  acknowledgement = ack-nhfb,
  affiliation =  "Univ. Coll., Dublin, Ireland",
  classification = "B6210L (Computer communications); C5620 (Computer
                 networks and techniques); C6150J (Operating systems)",
  keywords =     "Add-on Amoeba communication protocol; Amoeba network
                 communication facility; Built-in message passing
                 mechanism; Client-server model; Isomorphism; Message
                 passing; Micro kernal; Migrating process; Minix; Modern
                 operating system design concepts; Networking software;
                 PCs; Process encapsulation; Process migration
                 mechanism; Remote execution; Residual dependency; RPC;
                 Stub processes; Surrogates",
  thesaurus =    "Computer networks; Microcomputer applications; Unix",
}

@InProceedings{Pazzini:1992:TMT,
  author =       "M. Pazzini and P. Navaux",
  title =        "{TRIX}, a multiprocessor transputer-based operating
                 system",
  crossref =     "Valero:1992:PCT",
  pages =        "621--630 (vol. 1)",
  year =         "1992",
  bibdate =      "Mon Sep 30 17:00:16 MDT 1996",
  note =         "Two volumes.",
  abstract =     "The TRIX project develops an operating system to run
                 on multiprocessor machines based on INMOS transputers.
                 The source code used to begin the implementation is the
                 MINIX operating system, which provides an environment
                 of communicating sequential processes. Transputers have
                 been embedded in hardware this environment so the
                 kernel becomes very small and fast. As the
                 architectures supported are multiprocessed, the
                 original MINIX communication scheme has to be changed,
                 to include locality transparency The TRIX message
                 passing mechanism uses transputer instructions to send
                 and receive messages and a new task has been added to
                 the original MINIX kernel to route outside messages. A
                 new Memory Manager is being developed, to distribute
                 and balance the processes load amongst the transputer
                 network.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. de Eletronica e Computacao, Univ. Federal de
                 Santa Maria, Brazil",
  classification = "C5220P (Parallel architecture); C5440
                 (Multiprocessor systems and techniques); C6150N
                 (Distributed systems)",
  keywords =     "Communicating sequential processes; INMOS transputers;
                 Locality transparency; Message passing mechanism;
                 MINIX; Multiprocessor machines; Multiprocessor
                 transputer-based operating system; Source code;
                 Transputer instructions; TRIX",
  thesaurus =    "Multiprocessing systems; Network operating systems;
                 Transputer systems",
}

@Book{Tanenbaum:1992:MRM,
  author =       "Andrew S. (Andrew Stuart) Tanenbaum and Adrie Koolen
                 and Johan W. Stevenson",
  title =        "{Minix} 1.5 reference manual",
  publisher =    pub-PH,
  address =      pub-PH:adr,
  pages =        "vii + 709",
  year =         "1992",
  ISBN =         "0-13-579632-6",
  LCCN =         "QA76.76.O63 M74525 1992",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  acknowledgement = ack-nhfb,
  keywords =     "Microcomputers -- Operating systems",
}

@Article{Wei:1992:DSU,
  author =       "Yan Wei",
  title =        "Disk structures of {Unix} file systems",
  journal =      "Mini-Micro Systems",
  volume =       "13",
  number =       "10",
  pages =        "60--64",
  year =         "1992",
  CODEN =        "XWJXEH",
  ISSN =         "1000-1220",
  bibdate =      "Mon Sep 30 17:00:16 MDT 1996",
  abstract =     "The disk structures of file systems in two up-to-date
                 versions of the Unix system (System V and BSD) are
                 analysed. Their features are compared to each other.
                 The i-node and disk block management mechanisms
                 connected with disk structures are also discussed.
                 Finally, the disk structure of Minix (a teaching
                 version of Unix system) file system is introduced.",
  acknowledgement = ack-nhfb,
  classification = "C6120 (File organisation); C6150J (Operating
                 systems)",
  keywords =     "BSD; Disk block management mechanisms; Disk
                 structures; File systems; I-node; Minix; System V;
                 Teaching version; Unix system; Up-to-date versions",
  language =     "Chinese",
  pubcountry =   "China",
  thesaurus =    "Storage allocation; Storage management; Unix",
}

@Article{Ciancarini:1993:LMM,
  author =       "P. Ciancarini and N. Guerrini",
  title =        "{Linda} meets {Minix}",
  journal =      j-OPER-SYS-REV,
  volume =       "27",
  number =       "4",
  pages =        "76--92",
  month =        oct,
  year =         "1993",
  CODEN =        "OSRED8",
  DOI =          "http://doi.acm.org/10.1145/163640.163647",
  ISSN =         "0163-5980",
  bibdate =      "Mon Sep 30 17:00:16 MDT 1996",
  abstract =     "Currently much interest is devoted to the development
                 of systems supporting parallel and distributed
                 programming over a network of workstations. The authors
                 explore operating system support for this kind of
                 programming, that is usually implemented at the user
                 process level. They have chosen the Linda model as the
                 basis of a programming system for networks of personal
                 computers running Minix, a Unix-like operating system.
                 They briefly describe the Minix operating system and
                 its services for remote communication based on the
                 Amoeba protocol. They have extended Minix with new
                 communication primitives based on Linda; they show
                 their implementation, describing the new system
                 architecture, and compare the new system with other
                 Linda implementations.",
  acknowledgement = ack-nhfb,
  affiliation =  "Bologna Univ., Italy",
  classification = "C6110P (Parallel programming); C6140D (High level
                 languages); C6150N (Distributed systems)",
  keywords =     "Amoeba protocol; Communication primitives; Distributed
                 programming; Linda; Minix; Operating system support;
                 Personal computer networks; Remote communication; Unix;
                 Workstation network",
  thesaurus =    "Microcomputer applications; Network operating systems;
                 Parallel languages; Remote procedure calls",
}

@Article{DeJonge:1993:LDN,
  author =       "W. {De Jonge} and M. F. Kaashoek and W. C. Hsieh",
  title =        "The {Logical Disk}: a new approach to improving file
                 systems",
  journal =      j-OPER-SYS-REV,
  volume =       "27",
  number =       "5",
  pages =        "15--28",
  month =        dec,
  year =         "1993",
  CODEN =        "OSRED8",
  ISSN =         "0163-5980",
  bibdate =      "Mon Sep 30 17:08:59 MDT 1996",
  note =         "14th ACM Symposium on Operating Systems Principles,
                 Ashville, NC, USA.",
  abstract =     "The Logical Disk (LD) defines a new interface to disk
                 storage that separates file management and disk
                 management by using logical block numbers and block
                 lists. The LD interface is designed to support multiple
                 file systems and to allow multiple implementations,
                 both of which are important given the increasing use of
                 kernels that support multiple operating system
                 personalities. A log-structured implementation of LD
                 (LLD) demonstrates that LD can be implemented
                 efficiently. LLD adds about 5\% to 10\% to the purchase
                 cost of a disk for the main memory it requires.
                 Combining LLD with an existing file system results in a
                 log-structured file system that exhibits the same
                 performance characteristics as the Sprite
                 log-structured file system.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. of Math. and Comput. Sci., Vrije Univ.,
                 Amsterdam, Netherlands",
  classification = "C6120 (File organisation); C6150J (Operating
                 systems)",
  keywords =     "Block lists; Disk management; Disk storage; File
                 management; File systems; Log-structured file system;
                 Logical block numbers; Logical Disk; MINIX; Multiple
                 file systems; Operating system personalities;
                 Performance characteristics; Sprite; UNIX",
  thesaurus =    "File organisation; Operating systems [computers];
                 Storage management",
}

@Article{Guerrero:1993:IEA,
  author =       "R. Guerrero and L. Leguizamon and R. Gallard",
  title =        "Implementation and evaluation of alternative process
                 schedulers in {Minix}",
  journal =      j-OPER-SYS-REV,
  volume =       "27",
  number =       "1",
  pages =        "79--100",
  month =        jan,
  year =         "1993",
  CODEN =        "OSRED8",
  DOI =          "http://doi.acm.org/10.1145/160551.160558",
  ISSN =         "0163-5980",
  bibdate =      "Mon Sep 30 17:00:16 MDT 1996",
  bibsource =    "Compendex database",
  abstract =     "Minix is a Unix clone Operating System, designed by
                 Tanembaum ([2], [3]) to allow beginners to do practical
                 training in Operatin Systems area. In this context the
                 present paper describes the work done by a group of
                 students implementing alternative process schedulers
                 disciplines and their evaluation comparing performance
                 estimates. Some unexpected deviations in the original
                 implementation (Minix V. 1. 0), found during software
                 development, are also reported.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. de Inf., Univ. Nacional de San Luis, Argentina",
  affiliation =  "Univ Nacional de San Luis",
  affiliationaddress = "San Luis, Argent",
  classification = "C0220 (Education and training); C6150J (Operating
                 systems); C7810C (Computer-aided instruction)",
  classification = "722.4; 723.1",
  journalabr =   "Oper Syst Rev ACM",
  keywords =     "Alternative process schedulers disciplines; Beginners;
                 Performance estimates; Practical training; Software
                 development; Students; Unix clone operating system",
  keywords =     "Alternative process schedulers; Computer operating
                 systems; Computer software; Evaluation; MINIX;
                 Performance; Scheduling; Software engineering",
  thesaurus =    "Computer science education; Educational computing;
                 Scheduling; Unix",
}

@Article{Kavka:1993:EDM,
  author =       "C. Kavka and M. Printista and R. Gallard",
  title =        "Extending device management in {Minix}",
  journal =      j-OPER-SYS-REV,
  volume =       "27",
  number =       "2",
  pages =        "35--43",
  month =        apr,
  year =         "1993",
  CODEN =        "OSRED8",
  DOI =          "http://doi.acm.org/10.1145/155848.155856",
  ISSN =         "0163-5980",
  bibdate =      "Mon Sep 30 17:00:16 MDT 1996",
  abstract =     "Minix is a Unix clone operating system, designed by
                 Tanembaum (1987), to allow beginners to do practical
                 training in the operating systems area. In this context
                 the present paper describes the work done by a group of
                 undergraduates implementing extensions in device
                 management. Problems in the original code, detected
                 during the analysis and development stages, are also
                 reported.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. de Inf., Univ. Nacional de San Luis, Argentina",
  classification = "C6150J (Operating systems)",
  keywords =     "Device management; Minix; Operating systems; Unix
                 clone",
  thesaurus =    "Unix",
}

@MastersThesis{Li:1993:PMV,
  author =       "Xiaohong Li",
  title =        "Porting {MINIX} to {VM}",
  type =         "Thesis (M.S.)",
  school =       "Teikyo Marycrest University",
  address =      "Tokyo, Japan (??)",
  pages =        "v + 83",
  year =         "1993",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  acknowledgement = ack-nhfb,
  keywords =     "IBM 9370 (Computer); IBM Personal Computer.; Virtual
                 computer systems.",
}

@Article{Nakao:1993:ACD,
  author =       "Zensho Nakao and Masaya Kinjo and Masahiro Nakama",
  title =        "{Ada} and {C}: differences as the language for system
                 programming",
  journal =      j-SIGADA-LETTERS,
  volume =       "13",
  number =       "5",
  pages =        "22--31",
  month =        sep # "\slash " # oct,
  year =         "1993",
  CODEN =        "AALEE5",
  ISSN =         "0736-721X",
  bibdate =      "Thu Sep 04 06:50:32 1997",
  bibsource =    "Compendex database",
  abstract =     "Some fundamental differences between Ada and C as the
                 language for operating system description are listed
                 up. Specifically, those differences observed in
                 translating the C-based MINIX operating system into Ada
                 are presented. The authors also give concrete
                 illustrative program examples.",
  acknowledgement = ack-nhfb,
  affiliation =  "Fac. of Eng., Ryukyus Univ., Okinawa, Japan",
  classification = "721.1; 723.1; 723.1.1; 723.2; C6110 (Systems
                 analysis and programming); C6140D (High level
                 languages); C6150C (Compilers, interpreters and other
                 processors); C6150J (Operating systems)",
  conferenceyear = "1993",
  journalabr =   "Ada Lett",
  keywords =     "Ada; Ada (programming language); Ada-based MINIX
                 operating systems; Boolean algebra; C; C (programming
                 language); C-based MINIX operating system; C-based
                 MINIX operating systems; Codes (symbols); Computer
                 operating systems; Computer systems programming; Data
                 structures; Data types; Operating system description;
                 Program translators; Programming languages; Programming
                 theory; System programming",
  thesaurus =    "Ada; Ada listings; C language; Operating systems
                 [computers]; Program interpreters; Programming; Unix",
}

@Article{Tsai:1993:LMM,
  author =       "Shang Rong Tsai and Lian-Jou Tsai",
  title =        "A logical machine monitor supporting an environment
                 for development and execution of operating systems",
  journal =      j-J-SYST-SOFTW,
  volume =       "21",
  number =       "1",
  pages =        "27--39",
  month =        apr,
  year =         "1993",
  CODEN =        "JSSODM",
  ISSN =         "0164-1212",
  bibdate =      "Mon Sep 30 17:00:16 MDT 1996",
  abstract =     "The logical machine is an approach for designing and
                 developing operating systems. It partitions
                 conventional operating systems into two parts, the
                 logical machine operating system and the logical
                 machine monitor, which are responsible for user
                 services and system resource management, respectively.
                 The logical machine monitor provides a logical machine
                 interface for the logical machine operating system to
                 get the resources it needs. A logical machine monitor,
                 LMM386, has been successfully implemented to provide an
                 environment for the development and execution of a
                 logical machine operating systems (LMOS). Also, the
                 LMM386 introduces a tool for developing LMM386 itself
                 and the LMOS. This article discusses how to develop a
                 logical machine system on 80386 machines. An LMOS
                 derived from MINIX, executed in this environment, was
                 built to demonstrate the feasibility and merits of the
                 logical machine concept. By this approach, one can
                 easily monitor the behaviour of the LMOS. Furthermore,
                 by applying the concept in a distributed environment,
                 one can enhance the system capabilities, such as remote
                 disk mapping, disk replication and fault tolerance,
                 without changing the internal logic of the LMOS.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. of Electr. Eng., Nat. Cheng-Kung Univ., Tainan,
                 Taiwan",
  classification = "C6150J (Operating systems); C7430 (Computer
                 engineering)",
  keywords =     "80386 Machines; Disk replication; Distributed
                 environment; Fault tolerance; LMM386; Logical machine
                 monitor; Logical machine operating system; MINIX;
                 Remote disk mapping; System development; System
                 resource management; User services; Virtual machine",
  thesaurus =    "Operating systems [computers]; Virtual machines",
}

@MastersThesis{Viken:1993:LRA,
  author =       "J{\o}rn I. Viken",
  title =        "Lindex --- en reimplementasjon av {MINIX} ved hjelp av
                 {Linda.} (Norwegian) [{Lindex}: a reimplementation of
                 {MINIX} with the help af {Linda}",
  language =     "Norwegian",
  school =       "Universitetet i Oslo,",
  year =         "1993",
  pages =        "179",
  address =      "Oslo, Norway",
  type =         "Hovedoppgave i informatikk (Informatics thesis)",
  acknowledgement = ack-nhfb,
  bibdate =      "Wed Apr 12 06:00:34 2006",
}

@Article{Ashton:1994:SMT,
  author =       "P. Ashton and D. Ayers and P. Smith",
  title =        "Sun{OS} {Minix}: a tool for use in operating system
                 laboratories",
  journal =      j-AUSTRALIAN-COMP-SCI-COMM,
  volume =       "16",
  number =       "1,",
  pages =        "259--269",
  year =         "1994",
  CODEN =        "ACSCDD",
  ISSN =         "0157-3055",
  bibdate =      "Mon Sep 30 17:02:30 MDT 1996",
  abstract =     "Laboratory work is an essential part of the learning
                 experience in many areas of computer science, and this
                 is particularly true in the area of operating systems.
                 To support laboratory work in operating systems, we
                 have created SunOS Minix, a version of the Minix
                 operating system that runs as a process under Sun Unix
                 (SunOS). To date, projects for two advanced classes on
                 operating systems have involved extensive work with the
                 SunOS Minix source code. Also, we are in the process of
                 developing a novel graphical monitoring and control
                 interface that will make SunOS Minix a powerful tool
                 for use in introductory operating system
                 laboratories.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. of Comput. Sci., Canterbury Univ., Christchurch,
                 New Zealand",
  classification = "C0220 (Computing education and training); C6150J
                 (Operating systems)",
  keywords =     "Advanced classes; Computer science; Control interface;
                 Graphical monitoring; Introductory operating system
                 laboratories; Laboratory work; Minix operating system;
                 Operating system laboratories; Source code; Sun Unix;
                 SunOS Minix",
  thesaurus =    "Computer science education; Operating systems
                 [computers]; Teaching; Unix",
}

@InProceedings{Tsai:1994:LBF,
  author =       "Shang Rong Tsai and Jyh-Tzong Chiou and Huan-Ting
                 Jen",
  title =        "Load balance facility in distributed {MINIX} system",
  crossref =     "IEEE:1994:SAI",
  pages =        "162--169",
  DOI =          "http://dx.doi.org/10.1109/EURMIC.1994.390339 ",
  year =         "1994",
  bibdate =      "Mon Sep 30 17:06:20 MDT 1996",
  abstract =     "This paper presents the design of a load balance
                 facility with dynamic load balance policy in the
                 Distributed MINIX operating system. It also discusses
                 the performance improved with the load balance
                 facilities. Process migration and remote execution are
                 used as the basic mechanisms to achieve load balance.
                 We also design a simple and efficient method to get the
                 workload of a computer and a method to get process
                 characteristics. Depending on the workload and process
                 characteristics, the load balance facilities can decide
                 which process to migrate and where to migrate
                 effectively. The experiment shows that the system
                 performance can be improved with our load balance
                 facilities.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. of Electr. Eng., Nat. Cheng Kung Univ., Tainan,
                 Taiwan",
  classification = "C6150N (Distributed systems software)",
  keywords =     "Distributed MINIX system; Dynamic load balance policy;
                 Load balance facility; Process characteristics; Process
                 migration; Remote execution; System performance",
  thesaurus =    "Network operating systems; Operating systems
                 [computers]; Processor scheduling; Resource allocation;
                 Unix",
}

@MastersThesis{Chang:1995:IWS,
  author =       "Chiu-liang Chang",
  title =        "The implementation of a Window system for {MINIX}
                 1.3",
  type =         "Thesis (M.S.)",
  school =       "California State University, Chico",
  address =      "Chico, CA, USA",
  pages =        "x + 65",
  year =         "1995",
  bibdate =      "Thu Sep 4 06:34:12 MDT 1997",
  acknowledgement = ack-nhfb,
}

@MastersThesis{Chittoor:1995:ISS,
  author =       "Chandra S. Chittoor",
  title =        "Implementation of sockets on {SunOS Minix}",
  type =         "Thesis (M.S.)",
  school =       "Kansas State University",
  address =      "Manhattan, KS, USA",
  pages =        "iii + 75",
  year =         "1995",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  acknowledgement = ack-nhfb,
}

@Article{Matsumoto:1995:CSN,
  author =       "H. Matsumoto and Y. Hashino and H. Yashiro and N.
                 Shinohara and H. Omura",
  title =        "Computer simulation on nonlinear interaction of
                 intense microwaves with space plasmas",
  journal =      "Transactions of the Institute of Electronics,
                 Information and Communication Engineers B-II",
  volume =       "J78B-II",
  number =       "3",
  pages =        "119--129",
  month =        mar,
  year =         "1995",
  CODEN =        "DTBTEU",
  bibdate =      "Mon Sep 30 17:06:20 MDT 1996",
  abstract =     "In order to provide a quantitative measure of the
                 nonlinear effects of intense microwaves on space
                 plasmas, we conducted computer simulations using an
                 electromagnetic particle code called KEMPO. It turns
                 out that the excited level of the Langmuir waves is
                 smaller than that of the electron cyclotron harmonic
                 waves. This finding was the opposite of the theoretical
                 prediction. Interpretation of this apparent
                 contradiction with the theory is given.",
  acknowledgement = ack-nhfb,
  affiliation =  "Radio Atmos. Sci. Center, Kyoto Univ., Japan",
  classification = "A5235M (Nonlinear plasma waves and nonlinear
                 interactions); A5240D (Electromagnetic wave propagation
                 in plasma); A9420R (Ionospheric plasma waves,
                 instabilities, and interactions); B5210H
                 (Electromagnetic wave propagation in plasma); C7340
                 (Geophysics computing)",
  keywords =     "Computer simulation; Electromagnetic particle code;
                 Electron cyclotron harmonic waves; Intense microwaves;
                 KEMPO; Langmuir waves; Microwave Ionosphere Nonlinear
                 Interaction Experiment; MINIX; Nonlinear effects;
                 Nonlinear interaction; Solar power station; Space
                 plasmas; Three wave coupling; Wave-wave-particle
                 interaction",
  language =     "Japanese",
  pubcountry =   "Japan",
  thesaurus =    "Geophysics computing; Ionosphere; Microwave power
                 transmission; Plasma electromagnetic wave propagation;
                 Plasma Langmuir waves; Plasma nonlinear waves; Solar
                 power satellites",
}

@InProceedings{ONeil:1995:GDD,
  author =       "T. E. O'Neil and B. Knudson",
  title =        "A Generic Device Driver for the {MINIX} Operating
                 System",
  crossref =     "Anonymous:1995:SCC",
  pages =        "187--193",
  year =         "1995",
  bibdate =      "Thu Sep 4 06:34:12 MDT 1997",
  acknowledgement = ack-nhfb,
}

@Article{Wainer:1995:IRS,
  author =       "Gabriel A. Wainer",
  title =        "Implementing real-time services in {MINIX}",
  journal =      j-OPER-SYS-REV,
  volume =       "29",
  number =       "3",
  pages =        "75--84",
  month =        jul,
  year =         "1995",
  CODEN =        "OSRED8",
  DOI =          "http://doi.acm.org/10.1145/206826.206846",
  ISSN =         "0163-5980",
  bibdate =      "Mon Sep 30 17:02:30 MDT 1996",
  abstract =     "We present the results of a project devoted to
                 providing programming facilities to develop hard
                 real-time software. We have used the MINIX operating
                 system as a tool. We allow the programmer to define
                 timing constraints for the tasks, letting the operating
                 system run these tasks in a timely fashion. In this
                 way, we can improve productivity, security and costs in
                 the system development cycle.",
  acknowledgement = ack-nhfb,
  affiliation =  "Dept. de Comput., Buenos Aires Univ., Argentina",
  classification = "C6115 (Programming support); C6130S (Data security);
                 C6150J (Operating systems)",
  keywords =     "Costs; Hard real-time software development; MINIX
                 operating system; Productivity; Programming facilities;
                 Real-time services; Security; System development cycle;
                 Tasks; Timing constraints",
  thesaurus =    "Operating systems [computers]; Real-time systems;
                 Security of data; Software cost estimation; Software
                 tools; Timing",
}

@MastersThesis{Xu:1995:SIP,
  author =       "Li Xu",
  title =        "Study of an implementation of processes in {MINIX}",
  type =         "Thesis (M.S.)",
  school =       "Mathematics and Computer Science, Central Missouri
                 State University",
  address =      "Warrensburg, MO, USA",
  pages =        "iv + 34",
  year =         "1995",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  acknowledgement = ack-nhfb,
  keywords =     "MINIX (Computer file)",
}

@MastersThesis{Yang:1995:SMO,
  author =       "Po-Tsun Yang",
  title =        "Study of {MINIX} operating system",
  type =         "Thesis (M.S.)",
  school =       "Mathematics and Computer Science, Central Missouri
                 State University",
  address =      "Warrensburg, MO 64093, USA",
  pages =        "iv + 27",
  year =         "1995",
  bibdate =      "Sat May 4 18:45:07 MDT 1996",
  acknowledgement = ack-nhfb,
  keywords =     "MINIX (Computer file); Operating systems (Computers)",
}

@MastersThesis{Vaidyanathan:1996:PMM,
  author =       "Ranjani Vaidyanathan",
  title =        "Porting {MINIX} to a multiprocessor platform",
  type =         "Thesis (M. S.)",
  school =       "Southwest Texas State University",
  address =      "San Marcos, TX, US",
  pages =        "156",
  year =         "1996",
  bibdate =      "Thu Sep 4 06:34:12 MDT 1997",
  acknowledgement = ack-nhfb,
  keywords =     "Operating systems (Computers); Multiprocessors.",
}

@Article{Ashton:1997:UIN,
  author =       "Paul Ashton",
  title =        "Using interaction networks for visualization of
                 message passing",
  journal =      j-SIGCSE,
  pages =        "272--276",
  year =         "1997",
  CODEN =        "SIGSD3",
  ISSN =         "0097-8418",
  bibdate =      "Thu Sep 4 05:55:40 MDT 1997",
  bibsource =    "Compendex database",
  abstract =     "Understanding software structured as separate programs
                 that communicate via message passing requires
                 understanding how the various programs interact with
                 each other, as well as understanding the individual
                 programs in isolation. An interaction network display
                 shows in a visual way message passing within and
                 between programs. We have implemented an interaction
                 network monitor for the MINIX operating system, for use
                 in showing students how the system programs and
                 processes of MINIX interact to provide operating system
                 services. We give three examples to demonstrate the
                 insights into message-based systems that can be gained
                 from studying interaction network displays.",
  acknowledgement = ack-nhfb,
  affiliation =  "Univ of Canterbury",
  affiliationaddress = "Christchurch, New Zealand",
  classification = "722.4; 723; 723.1",
  conference =   "Proceedings of the 1997 28th SIGCSE Technical
                 Symposium on Computer Science Education",
  journalabr =   "SIGCSE Bull",
  keywords =     "Interactive computer systems; Computer networks;
                 Computer operating systems; Structured programming;
                 Message passing; Interaction networks; minix operating
                 systems",
  meetingaddress = "San Jose, CA, USA",
  meetingdate =  "Feb 27--Mar 1 1997",
  meetingdate2 = "02/27--03/01/97",
  sponsor =      "ACM SIGCSE",
}

@Article{Christie:1997:DAK,
  author =       "Dave Christie",
  title =        "Developing the {AMD-K5} Architecture",
  journal =      j-IEEE-MICRO,
  volume =       "16",
  number =       "2",
  pages =        "16--26",
  month =        apr,
  year =         "1997",
  bibdate =      "Thu Sep 04 09:19:47 1997",
  note =         "Brief mention of a working port of MINIX to the
                 AM29000 RISC microprocessor.",
  acknowledgement = ack-nhfb,
}

@Article{Olabe:1997:OSD,
  author =       "M. A. Olabe",
  title =        "Operating systems design and implementation: an
                 integrated approach using {Minix}",
  journal =      j-COMP-EDU-J,
  volume =       "7",
  number =       "1",
  pages =        "59--65",
  month =        jan # "\slash " # mar,
  year =         "1997",
  CODEN =        "CEJOE7",
  ISSN =         "1069-3769",
  bibdate =      "Thu Sep 4 10:00:57 MDT 1997",
  acknowledgement = ack-nhfb,
  classification = "B0120 (Education and training); B6200
                 (Telecommunication); C0220 (Computing education and
                 training); C6150J (Operating systems)",
  corpsource =   "Univ. del Pais Vasco, Bilbao, Spain",
  keywords =     "computer science education; educational courses;
                 operating systems (computers); teaching;
                 telecommunication engineering education; Unix;
                 operating systems design; operating systems
                 implementation; integrated approach; Minix; Mini-UNIX;
                 teaching; educational course; telecommunication
                 engineering programme; ETSII-IT, Bilbao, Spain; process
                 management; input-output; memory management; file
                 system; multitasking; laboratory exercises; source file
                 modification; confidence level",
  treatment =    "A Application",
}

@Book{Tanenbaum:1997:OSD,
  author =       "Andrew S. Tanenbaum and Albert S. Woodhull",
  title =        "Operating Systems\emdash Design and Implementation",
  publisher =    pub-PH,
  address =      pub-PH:adr,
  edition =      "Second",
  pages =        "xvii + 939",
  year =         "1997",
  ISBN =         "0-13-638677-6",
  LCCN =         "QA76.76.O63T36 1997",
  bibdate =      "Wed Dec 31 08:29:24 1997",
  note =         "Includes CD-ROM.",
  price =        "US\$62.00",
  libnote =      "Not yet in my library.",
}

@Book{Tanenbaum:1998:OSS,
  author =       "Andrew S. Tanenbaum and Albert S. Woodhull and Junko
                 Chigira",
  title =        "Operetingu shisutemu: sekkei to riron oyobi minikkusu
                 ni yoru jisso",
  publisher =    "Purentisuhoru Shuppan",
  address =      "Tokyo, Japan",
  edition =      "Second",
  pages =        "1033",
  year =         "1998",
  ISBN =         "4-89471-047-1",
  ISBN-13 =      "978-4-89471-047-4",
  LCCN =         "????",
  bibdate =      "Wed Apr 12 06:12:15 2006",
  acknowledgement = ack-nhfb,
  language =     "Japanese",
}

@MastersThesis{Williams:1998:MLU,
  author =       "James D. Williams",
  title =        "A methodology for {Linux} as a user process based on
                 {Solaris Minix} on the {SPARC} architecture",
  type =         "Thesis ({M.S.})",
  school =       "New Mexico State University",
  address =      "as Cruces, NM 88003-8001, USA",
  pages =        "xiii + 141",
  year =         "1998",
  bibdate =      "Wed Apr 12 06:09:29 2006",
  acknowledgement = ack-nhfb,
}

@Book{Tanenbaum:2001:MOS,
  author =       "Andrew S. Tanenbaum",
  title =        "Modern operating systems",
  publisher =    pub-PH,
  address =      pub-PH:adr,
  edition =      "Second",
  pages =        "xxiv + 951",
  year =         "2001",
  ISBN =         "0-13-031358-0",
  ISBN-13 =      "978-0-13-031358-4",
  LCCN =         "QA76.76.O63 T359 2001",
  bibdate =      "Wed Apr 12 05:42:19 MDT 2006",
  bibsource =    "z3950.loc.gov:7090/Voyager",
  acknowledgement = ack-nhfb,
  subject =      "Operating systems (Computers)",
  keywords =     "GNU/Linux; MINIX; UNIX; Windows 2000",
}

@Article{Howatt:2002:OSP,
  author =       "James Howatt",
  title =        "Operating systems projects: {Minix} revisited",
  journal =      j-SIGCSE,
  volume =       "34",
  number =       "4",
  pages =        "109--111",
  month =        dec,
  year =         "2002",
  CODEN =        "SIGSD3",
  DOI =          "http://doi.acm.org/10.1145/820127.820179",
  ISSN =         "0097-8418",
  bibdate =      "Sat Aug 26 06:56:54 2006",
  abstract =     "The author argues for the use of a real, albeit
                 educational-strength, operating system, instead of
                 simulators, on which to base operating systems
                 projects. Minix developers have created a version that
                 can be run on Windows and Unix platforms, without the
                 need for hard-drive partitioning. Sample projects
                 demonstrate how Minix can be used to reinforce
                 operating systems concepts.",
  acknowledgement = ack-nhfb,
}

@MastersThesis{Lakshmi:2004:IMM,
  author =       "Narasimhan Krishnan Lakshmi",
  title =        "Improving {MINIX} memory management",
  type =         "Thesis ({M.S.})",
  school =       "Kansas State University",
  address =      "Manhattan, KS 66506, USA",
  pages =        "vi + 62",
  year =         "2004",
  bibdate =      "Wed Apr 12 06:13:44 2006",
  acknowledgement = ack-nhfb,
}

@MastersThesis{Noll:2004:MDD,
  author =       "Ryan P. Noll",
  title =        "{Minix} device driver for the {AMD PCnet32}",
  type =         "Thesis ({B.S.})",
  school =       "California Polytechnic State University,",
  address =      "San Luis Obispo, CA, USA",
  pages =        "various",
  year =         "2004",
  bibdate =      "Wed Apr 12 06:15:39 2006",
  acknowledgement = ack-nhfb,
}

@MastersThesis{Herder:2005:TTM,
  author =       "Jorrit N. Herder",
  title =        "Towards a True Microkernel Operating System: {A}
                 revision of {MINIX} that brings quality enhancements
                 and strongly reduces the kernel in size by moving
                 device drivers to user-space",
  type =         "{Master of Science}",
  school =       "Department of Computer Science, Vrije Universiteit",
  address =      "Amsterdam, The Netherlands",
  pages =        "xvi + 117",
  day =          "23",
  month =        feb,
  year =         "2005",
  bibdate =      "Wed Jan 09 08:17:53 2008",
  URL =          "http://www.minix3.org/doc/herder_thesis.pdf",
  abstract =     "An operating system forms the foundation for all of
                 the user?s computer activities. Therefore, it should be
                 trustworthy and function flawlessly. Unfortunately,
                 today?s operating systems, such as Windows and Linux,
                 fail to deliver to this ideal, because they suffer from
                 fundamental design flaws and bugs. Their monolithic
                 kernel tend be overloaded with functionality that runs
                 at the highest privilege level. This easily introduces
                 bugs and breaches the Principle of Least Authorization
                 (POLA) with all the related risks. A malfunctioning
                 third-party device driver, for example, can easily reek
                 havoc on the system and leave it in a state of total
                 mayhem.\par

                 Microkernel operating systems have a different design
                 that makes them less vulnerable to these problems. A
                 microkernel provides only a minimal set of abstractions
                 that runs at the highest privilege level. Extended
                 operating system functionality is typically available
                 by means of user-space servers. By splitting an
                 operating system into small, independent parts, the
                 system becomes less complex and more robust, because
                 the smaller parts are more manageable and help to
                 isolate faults, respectively.\par

                 This thesis describes an effort to create a more
                 reliable operating system by exploiting modularity.
                 MINIX was chosen as the base operating system for this
                 project because it already is relatively small and
                 simple, but provides POSIX compliance at the same time.
                 MINIX? kernel can be characterized as a hybrid
                 microkernel because it includes device drivers. MINIX?
                 memory manager (MM) and file system (FS), however, are
                 already implemented as independent user-space
                 servers.\par

                 The main contribution of this work is that MINIX was
                 fully revised to become a true microkernel operating
                 system. In kernel-space, several system calls were
                 added to support the user-space device drivers, MINIX?
                 interprocess communication (IPC) facilities were
                 improved, and a new shutdown sequence was realized. In
                 user-space, a new information server (IS) was set up to
                 handle debugging dumps and a library was created to
                 maintain a list watchdog timers. These modifications
                 made it possible to strongly reduce the size of MINIX?
                 kernel by transforming the PRINTER, MEMORY, AT WINI,
                 FLOPPY and TTY tasks into independent, user-space
                 device drivers.",
  acknowledgement = ack-nhfb,
}

@MastersThesis{Alting:2006:MPM,
  author =       "Ingmar A. Alting",
  title =        "{MinixPPC}: {A} port of the {MINIX OS} to the
                 {PowerPC} platform: Creating a programming model for
                 architecture independency [sic]",
  type =         "Masters thesis",
  school =       "Department of Computer Science, Vrije Universiteit",
  address =      "Amsterdam, The Netherlands",
  pages =        "xi + 83 + 59",
  day =          "15",
  month =        sep,
  year =         "2006",
  bibdate =      "Wed Jan 09 08:22:16 2008",
  URL =          "http://www.minix3.org/doc/alting_thesis.pdf",
  abstract =     "The main goal of this project is to indicate what it
                 means to port an operating system from one architecture
                 to another, and provide a programming paradigm that
                 would make future ports easy and fast.\par

                 The natively supported architecture of MINIX is the IBM
                 PC compatible, that's built around the Intel
                 architecture. This is a CISC architecture with hardware
                 support for easy stack usage. The choice for the POWER
                 architecture could not have been further away as this
                 is a RISC architecture, and completely different in
                 many ways.\par

                 This thesis will [sic] focuses on the model created for
                 creating portable system code. Not to be confused with
                 portable programs using a standard API. It will
                 describe the changes made and problems faced porting
                 the MINIX code base. The places where changes are made
                 can be viewed as hotspots. For every new architecture
                 compatibility problems are to be expected there. Some
                 hotspots are used as example and the solution taken for
                 MinixPPC is presented to the reader.\par

                 A number of problems were found at the start of the
                 project. The MINIX OS is (still) using the old {\tt
                 a.out} format for it's executables. There is no
                 (recent) public compiler kit that is able to generate
                 {\tt a.out} format executables for the PowerPC. A
                 utility program had to be written to convert a minimum
                 section count Elf32 executable to {\tt a.out}
                 format. This way the installed compiler kit from host
                 OS can be used, which is a recent version of the GNU/C
                 compiler. Getting the kernel to load and executed by
                 the boot software of the PowerPC architecture was the
                 next challenge. With the aid of Open Source software a
                 preliminary scheme is created until MinixPPC is able to
                 compile itself. This introduces a new project of
                 getting a recent version of the GCC compiler kit ported
                 to MinixPPC.\par

                 The following reasoning defines the choice for the
                 driver model used in the creation of MinixPPC.\par

                 (1) System dependencies are located inside devices
                 drivers. Defining a method to create and develop device
                 drivers that have isolated system dependencies
                 contribute to the portability of the driver (this could
                 isolate the whole driver).\par

                 (2) The CPU is (just) a device.\par

                 (3) Creating a device driver for the CPU isolates the
                 CPU functionality from the rest of the system.\par

                 (4) With every device hidden behind its driver,
                 architecture dependent and independent code are
                 separated.\par

                 In principle the CPU could have multiple devices
                 inside, for example MMU and timers. For MinixPPC a
                 logical separation is made by creating two drivers for
                 the CPU, the Memory and System driver. At the moment
                 MinixPPC is able to boot, access a MINIX v3 file system
                 and run programs, but there are still problems. Not all
                 system calls are debugged and the system must be
                 thoroughly tested. The difficult part of the MinixPPC
                 project is done, but there is more work ahead. There is
                 working code and to some degree only hard work is
                 needed, most of the figuring-out, and trial-and-error
                 is done.",
  acknowledgement = ack-nhfb,
}

@InProceedings{Fraser:2006:AFS,
  author =       "Timothy Fraser and Nick L. {Petroni, Jr.} and William
                 A. Arbaugh",
  title =        "Applying flow-sensitive {CQUAL} to verify {MINIX}
                 authorization check placement: 3",
  crossref =     "ACM:2006:PWP",
  pages =        "3--6",
  year =         "2006",
  DOI =          "http://doi.acm.org/10.1145/1134744.1134747",
  bibdate =      "Sat Aug 26 06:52:32 2006",
  abstract =     "We present the first use of flow-sensitive CQUAL to
                 verify the placement of operating system authorization
                 checks. Our analysis of MINIX 3 system servers and
                 discovery of a non-exploitable Time-Of-Check\slash
                 Time-Of-Use bug demonstrate the effectiveness of flow
                 sensitive CQUAL and its advantage over earlier
                 flow-insensitive versions. We also identify and suggest
                 alternatives to current CQUAL usability features that
                 encourage analysts to make omissions that cause the
                 otherwise sound tool to produce false-negative
                 results.",
  acknowledgement = ack-nhfb,
}

@MastersThesis{Gerofi:2006:MVD,
  author =       "Bal{\'a}zs Ger{\H{o}}fi",
  title =        "{MINIX VFS}: Design and implementation of the {MINIX
                 Virtual File} system",
  type =         "Masters thesis",
  school =       "Department of Computer Science, Vrije Universiteit",
  address =      "Amsterdam, The Netherlands",
  pages =        "x + 108",
  month =        aug,
  year =         "2006",
  bibdate =      "Wed Jan 09 08:09:02 2008",
  URL =          "http://www.minix3.org/doc/gerofi_thesis.pdf",
  abstract =     "The Virtual File system (VFS) is an abstraction layer
                 over the file system implementations in the operating
                 system. It handles all system calls related to the file
                 system and allows for client applications to access
                 different types of file systems in a uniform way. It
                 also provides a common interface to several kinds of
                 file system implementations. The VFS layer was
                 introduced first in the SunOS and it is present in many
                 modern operating systems.\par

                 MINIX 3 is a microkernel based POSIX compliant
                 operating system designed to be highly reliable,
                 flexible, and secure. A minimal kernel provides
                 interrupt handlers, a mechanism for starting and
                 stopping processes, a scheduler, and interprocess
                 communication. Standard operating system functionality
                 that is present in a monolithic kernel is moved to user
                 space, and no longer runs at the highest privilege
                 level. Device drivers, the file system, the network
                 server and high-level memory management run as separate
                 user processes that are encapsulated in their private
                 address space.\par

                 By splitting an operating system into small,
                 independent modules, the system becomes less complex
                 and more robust, because the smaller parts are more
                 manageable and help to isolate faults.\par

                 This thesis describes the Virtual File system design
                 and implementation in the MINIX 3 operating system. It
                 also gives a comparison to other VFS designs.
                 Exploiting modularity is a key idea behind MINIX,
                 therefore the design of the Virtual File system layer
                 is also driven by this idea. The result is a
                 substantially different architecture from the Virtual
                 File system layer in other UNIX-like operating
                 systems.\par

                 The main contribution of this work is that the MINIX FS
                 server was fully revised in order to divide it into an
                 abstract layer and the actual MINIX file system driver.
                 New data structures and methods were added to the
                 virtual layer and modifications were realized in the
                 actual file system implementation.",
  acknowledgement = ack-nhfb,
}

@InProceedings{Herder:2006:CHD,
  author =       "Jorrit N. Herder and Herbert Bos and Ben Gras and
                 Philip Homburg and Andrew S. Tanenbaum",
  editor =       "????",
  booktitle =    "Proceedings of the 6th European Dependable Computing
                 Conference, 18--20 October 2006, Coimbra, Portugal",
  title =        "Construction of a Highly Dependable Operating System",
  publisher =    "????",
  address =      "????",
  pages =        "10",
  year =         "2006",
  ISBN =         "????",
  ISBN-13 =      "????",
  LCCN =         "????",
  bibdate =      "Wed Jan 09 08:30:39 2008",
  URL =          "http://www.minix3.org/doc/EDCC-2006.pdf;
                 http://www.eu-egee.org/egee_events/events/edcc-6-sixth-european-dependable-computing-conference-18-20-october-2006-coimbra-portugal/",
  abstract =     "It has been well established that most operating
                 system crashes are due to bugs in device drivers.
                 Because drivers are normally linked into the kernel
                 address space, a buggy driver can wipe out kernel
                 tables and bring the system crashing to a grinding
                 halt.\par

                 We have greatly mitigated this problem by reducing the
                 kernel to an absolute minimum and running each driver
                 as a separate, unprivileged user-mode process. In
                 addition, we implemented a POSIX-conformant operating
                 system, MINIX 3, as multiple user-mode servers. In this
                 design, a server or driver failure no longer is fatal
                 and does not require rebooting the computer.\par

                 This paper discusses how we designed and implemented
                 the system, which problems we encountered, and how we
                 solved these problems. We also discuss the performance
                 effects of our changes and evaluate how our multiserver
                 design improves operating system dependability over
                 monolithic designs.",
  acknowledgement = ack-nhfb,
}

@TechReport{Herder:2006:LMB,
  author =       "Jorrit N. Herder and Herbert Bos and Andrew S.
                 Tanenbaum",
  title =        "A Lightweight Method for Building Reliable Operating
                 Systems Despite Unreliable Device Drivers",
  type =         "Technical Report",
  number =       "IR-CS-018",
  institution =  "Department of Computer Science, Vrije Universiteit",
  address =      "Amsterdam, The Netherlands",
  pages =        "14",
  month =        jan,
  year =         "2006",
  bibdate =      "Wed Jan 09 08:04:48 2008",
  URL =          "http://www.minix3.org/doc/reliable-os.pdf",
  abstract =     "It has been well established that most operating
                 system crashes are due to bugs in device drivers.
                 Because drivers are normally linked into the kernel
                 address space, a buggy driver can wipe out kernel
                 tables and bring the system crashing to a halt. We have
                 greatly mitigated this problem by reducing the kernel
                 to an absolute minimum and running each driver as a
                 separate, unprivileged process in user space. In
                 addition, we implemented a POSIX-conformant operating
                 system as multiple user-mode processes. In this design,
                 all that is left in kernel mode is a tiny kernel of
                 under 3800 lines of executable code for catching
                 interrupts, starting and stopping processes, and doing
                 IPC. By moving nearly the entire operating system to
                 multiple, protected user-mode processes we reduce the
                 consequences of faults, since a driver failure no
                 longer is fatal and does not require rebooting the
                 computer. In fact, our system incorporates a
                 reincarnation server that is designed to deal with such
                 errors and often allows for full recovery, transparent
                 to the application and without loss of data. To achieve
                 maximum reliability, our design was guided by
                 simplicity, modularity, least authorization, and fault
                 tolerance. This paper discusses our lightweight
                 approach and reports on its performance and
                 reliability. It also compares our design to other
                 proposals for protecting drivers using kernel wrapping
                 and virtual machines.",
  acknowledgement = ack-nhfb,
}

@Article{Herder:2006:MHR,
  author =       "Jorrit N. Herder and Herbert Bos and Ben Gras and
                 Philip Homburg and Andrew S. Tanenbaum",
  title =        "{MINIX 3}: a highly reliable, self-repairing operating
                 system",
  journal =      j-OPER-SYS-REV,
  volume =       "40",
  number =       "3",
  pages =        "80--89",
  month =        jul,
  year =         "2006",
  CODEN =        "OSRED8",
  DOI =          "http://doi.acm.org/10.1145/1151374.1151391",
  ISSN =         "0163-5980",
  bibdate =      "Sat Aug 26 06:31:15 2006",
  URL =          "http://www.minix3.org/doc/OSR-2006.pdf",
  abstract =     "Different kinds of people use computers now than
                 several decades ago, but operating systems have not
                 fully kept pace with this change. It is true that we
                 have point-and-click GUIs now instead of command line
                 interfaces, but the expectation of the average user is
                 different from what it used to be, because the user is
                 different. Thirty or 40 years ago, when operating
                 systems began to solidify into their current form,
                 almost all computer users were programmers, scientists,
                 engineers, or similar professionals doing heavy-duty
                 computation, and they cared a great deal about speed.
                 Few teenagers and even fewer grandmothers spent hours a
                 day behind their terminal. Early users expected the
                 computer to crash often; reboots came as naturally as
                 waiting for the neighborhood TV repairman to come
                 replace the picture tube on their home TVs. All that
                 has changed and operating systems need to change with
                 the times.",
  acknowledgement = ack-nhfb,
}

@Article{Herder:2006:MSP,
  author =       "Jorrit N. Herder and Herbert Bos and Ben Gras and
                 Philip Homburg and Andrew S. Tanenbaum",
  title =        "Modular System Programming in {MINIX 3}",
  journal =      j-LOGIN,
  volume =       "31",
  number =       "2",
  pages =        "19--28",
  month =        apr,
  year =         "2006",
  CODEN =        "LOGNEM",
  ISSN =         "1044-6397",
  bibdate =      "Tue Apr 11 10:53:03 MDT 2006",
  bibsource =    "http://www.usenix.org/publications/login/2006-04/index.html",
  URL =          "http://www.usenix.org/publications/login/2006-04/openpdfs/herder.pdf;
                 http://www.minix3.org/",
  abstract =     "When the first modern operating systems were being
                 developed in the early 1960s, the designers were so
                 worried about performance that these systems were
                 written in assembly language, even though high-level
                 languages such as FORTRAN, MAD, and Algol were well
                 established. Reliability and security were not even on
                 the radar. Times have changed and we now need to
                 reexamine the need for reliability in operating
                 systems.",
  acknowledgement = ack-nhfb,
}

@InProceedings{Herder:2006:RUR,
  author =       "Jorrit N. Herder and Herbert Bos and Ben Gras and
                 Philip Homburg and Andrew S. Tanenbaum",
  crossref =     "Jesshope:2006:ACS",
  title =        "Reorganizing {UNIX} for Reliability",
  pages =        "??--??",
  year =         "2006",
  bibdate =      "Wed Jan 09 08:01:21 2008",
  URL =          "http://www.minix3.org/doc/ACSAC-2006.pdf",
  abstract =     "In this paper, we discuss the architecture of a
                 modular UNIX-compatible operating system, MINIX 3, that
                 provides reliability beyond that of most other systems.
                 With nearly the entire operating system running as a
                 set of user-mode servers and drivers atop a minimal
                 kernel, the system is fully compartmentalized.\par

                 By moving most of the code to unprivileged user-mode
                 processes and restricting the powers of each one, we
                 gain proper fault isolation and limit the damage bugs
                 can do. Moreover, the system has been designed to
                 survive and automatically recover from failures in
                 critical modules, such as device drivers, transparent
                 to applications and without user intervention.\par

                 We used this new design to develop a highly reliable,
                 open-source, POSIX-conformant member of the UNIX family.
                 The resulting system is freely available and has been
                 downloaded over 75,000 times since its release.",
  acknowledgement = ack-nhfb,
  pagecount =    "14",
}

@MastersThesis{Kelly:2006:PMX,
  author =       "Ivan Kelly",
  title =        "Porting {MINIX} to {Xen}",
  type =         "Final Year Project",
  school =       "Department of Computer Science, University of
                 Limerick",
  address =      "Limerick, Ireland",
  day =          "8",
  month =        may,
  year =         "2006",
  bibdate =      "Wed Jan 09 08:35:58 2008",
  URL =          "http://minixonxen.skynet.ie/cgi-bin/trac.cgi/attachment/wiki/Report/Report.pdf?format=raw",
  abstract =     "Virtualisation has received a lot of attention from
                 the I.T. media lately. Paravirtualisation in particular
                 has drawn a lot of attention due to its high
                 performance. Paravirtualised virtual machines run at
                 near native speeds. Operating systems must be modified
                 to run on paravirtualised platforms.\par

                 Developers starting out in the field of
                 paravirtualisation face a steep learning curve. This
                 project hopes to soften that curve, by supplying
                 developers with an insight into the porting of an
                 operating system to a paravirtualised platform. In this
                 case, the MINIX operating system is ported to the Xen
                 platform.",
  acknowledgement = ack-nhfb,
}

@MastersThesis{Meurs:2006:BPM,
  author =       "Rogier Meurs",
  title =        "Building Performance Measurement Tools for the {MINIX
                 3} Operating System",
  type =         "Masters thesis",
  school =       "Department of Computer Science, Vrije Universiteit",
  address =      "Amsterdam, The Netherlands",
  month =        aug,
  pages =        "ii + 59",
  year =         "2006",
  bibdate =      "Wed Jan 09 08:28:23 2008",
  URL =          "http://www.minix3.org/doc/meurs_thesis.pdf",
  abstract =     "The efficiency of computer programs has been always a
                 big theme in the history of computing. In the early
                 days, programs were written in the machine's native
                 instruction set to squeeze every bit of performance out
                 of the CPU. Nowadays most programs are written in
                 higher level languages which impose an overhead but
                 ease the job of programming. Some languages are based
                 on program execution by an interpreter, which slows
                 down execution even more. However, the programming
                 language is not the only factor influencing the speed
                 of execution. A simple programming error or the wrong
                 choice of data structure or sort algorithm could cause
                 a program to execute orders of magnitudes slower then
                 needed. To detect the existence or even find the
                 location of such an error in a program is not always a
                 trivial task.",
  acknowledgement = ack-nhfb,
}

@Article{Tanenbaum:2006:CWM,
  author =       "A. S. Tanenbaum and J. N. Herder and H. Bos",
  title =        "Can we make operating systems reliable and secure?",
  journal =      j-COMPUTER,
  year =         "2006",
  volume =       "39",
  number =       "5",
  pages =        "44--51",
  DOI =          "http://dx.doi.org/10.1109/MC.2006.156",
  abstract =     "Microkernels long discarded as unacceptable because of
                 their lower performance compared with monolithic
                 kernels might be making a comeback in operating systems
                 due to their potentially higher reliability, which many
                 researchers now regard as more important than
                 performance. Each of the four different attempts to
                 improve operating system reliability focuses on
                 preventing buggy device drivers from crashing the
                 system. In the Nooks approach, each driver is
                 individually hand wrapped in a software jacket to
                 carefully control its interactions with the rest of the
                 operating system, but it leaves all the drivers in the
                 kernel. The paravirtual machine approach takes this one
                 step further and moves the drivers to one or more
                 machines distinct from the main one, taking away even
                 more power from the drivers. Both of these approaches
                 are intended to improve the reliability of existing
                 (legacy) operating systems. In contrast, two other
                 approaches replace legacy operating systems with more
                 reliable and secure ones. The multiserver approach runs
                 each driver and operating system component in a
                 separate user process and allows them to communicate
                 using the microkernel's IPC mechanism. Finally,
                 Singularity, the most radical approach, uses a
                 type-safe language, a single address space, and formal
                 contracts to carefully limit what each module can do.",
  CODEN =        "CPTRB4",
  ISSN =         "0018-9162",
  month =        may,
  acknowledgement = ack-nhfb,
  bibdate =      "Sat Aug 26 07:15:02 2006",
}

@Book{Tanenbaum:2006:OSD,
  author =       "Andrew S. Tanenbaum and Albert S. Woodhull",
  title =        "Operating systems: design and implementation",
  publisher =    pub-PEARSON-PH,
  address =      pub-PEARSON-PH:adr,
  edition =      "Third",
  pages =        "xvii + 1054",
  year =         "2006",
  ISBN =         "0-13-142938-8",
  ISBN-13 =      "978-0-13-142938-3",
  LCCN =         "QA76.76.O63 T36 2006",
  bibdate =      "Wed Apr 12 05:42:39 MDT 2006",
  bibsource =    "z3950.loc.gov:7090/Voyager",
  acknowledgement = ack-nhfb,
  subject =      "Operating systems (Computers)",
  keywords =     "MINIX 3",
}

@MastersThesis{vanMoolenbroek:2007:MSM,
  author =       "David van Moolenbroek",
  title =        "Multimedia support for {MINIX 3}",
  type =         "Masters thesis",
  school =       "Department of Computer Science, Vrije Universiteit",
  address =      "Amsterdam, The Netherlands",
  pages =        "187",
  month =        sep,
  year =         "2007",
  bibdate =      "Wed Jan 09 08:14:03 2008",
  URL =          "http://www.minix3.org/doc/moolenbroek_thesis.pdf",
  acknowledgement = ack-nhfb,
}

@Article{Du:2008:SSI,
  author =       "Wenliang Du and Ronghua Wang",
  title =        "{SEED}: {A} Suite of Instructional Laboratories for
                 Computer Security Education",
  journal =      j-JERIC,
  volume =       "8",
  number =       "1",
  pages =        "3:1--3:??",
  month =        mar,
  year =         "2008",
  CODEN =        "????",
  DOI =          "http://doi.acm.org/10.1145/1348713.1348716",
  ISSN =         "1531-4278",
  bibdate =      "Fri Jun 20 10:13:08 MDT 2008",
  bibsource =    "http://www.acm.org/pubs/contents/journals/jeric/",
  abstract =     "The security and assurance of our computing
                 infrastructure has become a national priority. To
                 address this priority, higher education has gradually
                 incorporated the principles of computer and information
                 security into the mainstream undergraduate and graduate
                 computer science curricula. To achieve effective
                 education, learning security principles must be
                 grounded in experience. This calls for effective
                 laboratory exercises (or course projects). Although a
                 number of laboratories have been designed for security
                 education, they only cover a small portion of the
                 fundamental security principles. Moreover, their
                 underlying lab environments are different, making
                 integration of these laboratories infeasible for a
                 semester-long course. Currently, security laboratories
                 that can be widely adopted are still lacking, and they
                 are in great demand in security education.\par

                 We have developed a novel laboratory environment
                 (referred to as SEED). The SEED environment consists of
                 Minix, an instructional operating system (OS), and
                 Linux, a production OS; it takes advantage of the
                 simplicity of Minix and the completeness of Linux, and
                 provides a unified platform to support a rich set of
                 laboratories for computer security education. Based on
                 the SEED environment, we have developed a list of
                 laboratories that cover a wide spectrum of security
                 principles. These labs provide opportunities for
                 students to develop essential skills for secure
                 computing practice. We have been using these labs in
                 our courses during the last five years. This article
                 presents our SEED environment, laboratories, and
                 evaluation results.",
  acknowledgement = ack-nhfb,
  articleno =    "3",
  keywords =     "education; instructional laboratories; security",
}

%%% ====================================================================
%%% Cross-referenced entries must come last.

@Proceedings{Anonymous:1987:ESC,
  editor =       "Anonymous",
  title =        "{EUUG} Spring '87 Conference Proceedings",
  publisher =    pub-EUROPEN,
  address =      pub-EUROPEN:adr,
  pages =        "????",
  year =         "1987",
  bibdate =      "Sun Apr 13 12:27:34 MDT 1997",
  abstract =     "The following topics were dealt with: Unix; Vorlich;
                 structural regular expressions; event queue;
                 manufacturing; entertainment; distributed processing;
                 real-time systems; MINIX; telephone switch; banking;
                 selective calling system; marketing; commercial
                 computing; standards for Intel-based microcomputers;
                 C++; MuX; intelligent information server; SVID
                 compatible system; and Apple Macintosh integration",
  acknowledgement = ack-nhfb,
  classcodes =   "C6115 (Programming support); C6150J (Operating
                 systems)",
  conflocation = "M/S Mariella sailing between Helsinki, Finland and
                 Stockholm, Sweden; 12-14 May 1987",
  countrypub =   "UK",
  keywords =     "administrative data processing; Apple; banking; C++;
                 calling system; commercial computing; distributed
                 processing; entertainment; event queue; Intel;
                 intelligent information server; Macintosh;
                 manufacturing; marketing; MINIX; MuX; operating
                 systems; operating systems (computers); programming
                 environments; real-; real-time systems; selective;
                 standards; structural regular expressions; SVID;
                 telephone switch; time systems; Unix; UNIX; Vorlich",
}

@Proceedings{ACM:1988:PFS,
  editor =       "{ACM}",
  booktitle =    "Proceedings, focus on software / 1988 ACM Sixteenth
                 Annual Computer Science Conference, February 23--25,
                 the Westin, Peachtree Plaza, Atlanta, Georgia",
  title =        "Proceedings, focus on software / 1988 {ACM} Sixteenth
                 Annual Computer Science Conference, February 23--25,
                 the Westin, Peachtree Plaza, Atlanta, Georgia",
  publisher =    pub-ACM,
  address =      pub-ACM:adr,
  pages =        "xix + 749",
  year =         "1988",
  ISBN =         "0-89791-260-8",
  LCCN =         "QA 76.758 A26 1988",
  bibdate =      "Mon Sep 30 17:21:43 MDT 1996",
  acknowledgement = ack-nhfb,
  confdate =     "23--25 Feb. 1988",
  conflocation = "Atlanta, GA, USA",
  confsponsor =  "ACM",
}

@Proceedings{IEEE:1988:AIT,
  editor =       "{IEEE}",
  booktitle =    "Artificial intelligence: theory and applications:
                 proceedings, International Computer Science Conference
                 '88: 19--21 December, 1988, the Excelsior Hotel,
                 Causeway Bay, Hong Kong",
  title =        "Artificial intelligence: theory and applications:
                 proceedings, International Computer Science Conference
                 '88: 19--21 December, 1988, the Excelsior Hotel,
                 Causeway Bay, Hong Kong",
  publisher =    pub-IEEE,
  address =      pub-IEEE:adr,
  pages =        "735",
  year =         "1988",
  bibdate =      "Mon Sep 30 17:21:43 MDT 1996",
  acknowledgement = ack-nhfb,
  confdate =     "19--21 Dec. 1988",
  conflocation = "Hong Kong",
  pubcountry =   "Hong Kong",
}

@Proceedings{IEEE:1988:FAC,
  editor =       "{IEEE}",
  booktitle =    "Fourth Aerospace Computer Security Applications
                 Conference: Orlando, Florida, December 12--16, 1988",
  title =        "Fourth Aerospace Computer Security Applications
                 Conference: Orlando, Florida, December 12--16, 1988",
  publisher =    pub-IEEE,
  address =      pub-IEEE:adr,
  pages =        "xii + 440",
  year =         "1988",
  ISBN =         "0-8186-0895-1",
  LCCN =         "QA76.9.A25 A39 1988",
  bibdate =      "Mon Sep 30 17:55:16 MDT 1996",
  note =         "IEEE Cat. No.CH2619-5",
  acknowledgement = ack-nhfb,
  confdate =     "12--16 Dec. 1988",
  conflocation = "Orlando, FL, USA",
  confsponsor =  "IEEE; ASIS",
}

@Proceedings{Silveira:1988:ADV,
  editor =       "P. M. Silveira",
  booktitle =    "Anais do VIII Congresso da Sociedade Brasileira de
                 Computacao (VIII Congress of the Brazilian Computing
                 Society)",
  title =        "Anais do {VIII} Congresso da Sociedade Brasileira de
                 Computacao ({VIII} Congress of the Brazilian Computing
                 Society)",
  publisher =    "Sociedade Brasileira Computacao",
  address =      "Rio de Janeiro, Brazil",
  pages =        "x + 389",
  year =         "1988",
  bibdate =      "Mon Sep 30 17:55:16 MDT 1996",
  acknowledgement = ack-nhfb,
  confdate =     "17--22 July 1988",
  conflocation = "Rio de Janeiro, Brazil",
  pubcountry =   "Brazil",
}

@Proceedings{Anonymous:1989:SPA,
  editor =       "Anonymous",
  booktitle =    "SCCS Proceedings. 22nd Annual Small College Computing
                 Symposium",
  title =        "{SCCS} Proceedings. 22nd Annual Small College
                 Computing Symposium",
  publisher =    "Univ. Wisconsin-Eau Claire",
  address =      "Eau Claire, WI, USA",
  pages =        "v + 436",
  year =         "1989",
  bibdate =      "Mon Sep 30 17:55:16 MDT 1996",
  abstract =     "The following topics were dealt with: SEDES, special
                 education diagnostic expert system; word processing;
                 telecommunications; parallel processing; humanities
                 computing; AI; computer courses; CAI; distributed file
                 system for MINIX; programming environment; scattering
                 simulation; visual thinking; teaching cognitive
                 science; documentation library systems; soils
                 geography; software engineering; computer graphics; and
                 interactive video;.",
  acknowledgement = ack-nhfb,
  classification = "C0220 (Education and training); C6170 (Expert
                 systems); C7810C (Computer-aided instruction)",
  confdate =     "21--22 April 1989",
  conflocation = "Eau Claire, WI, USA",
  keywords =     "AI; CAI; Cognitive science; Computer courses; Computer
                 graphics; Distributed file system; Documentation
                 library systems; Humanities computing; Interactive
                 video; MINIX; Parallel processing; Programming
                 environment; Scattering simulation; SEDES; Software
                 engineering; Soils geography; Special education
                 diagnostic expert system; Teaching; Telecommunications;
                 Visual thinking; Word processing",
  thesaurus =    "Computer aided instruction; Computer science
                 education; Educational courses; Expert systems;
                 Teaching; Training",
}

@Proceedings{Anonymous:1989:UEC,
  editor =       "Anonymous",
  booktitle =    "UNIX: European challenges: proceedings of the Spring
                 1989 EUUG conference, April 3--7, 1989, Palais des
                 Congres, Brussels, Belgium",
  title =        "{UNIX}: European challenges: proceedings of the Spring
                 1989 {EUUG} conference, April 3--7, 1989, Palais des
                 Congres, Brussels, Belgium",
  publisher =    pub-EUUG,
  address =      pub-EUUG:adr,
  pages =        "xi + 291",
  year =         "1989",
  ISBN =         "0-9513181-2-8",
  LCCN =         "QA76.76.O63U54514 1989",
  bibdate =      "Mon Sep 30 17:53:27 MDT 1996",
  acknowledgement = ack-nhfb,
  confdate =     "3--7 April 1989",
  conflocation = "Brussels, Belgium",
  pubcountry =   "UK",
}

@Proceedings{Anonymous:1990:ISS,
  editor =       "Anonymous",
  booktitle =    "Information systems security: standards --- the key to
                 the future: 13th National Computer Security Conference:
                 Omni Shoreham Hotel, Washington, DC, 1--4 October,
                 1990: proceedings",
  title =        "Information systems security: standards --- the key to
                 the future: 13th National Computer Security Conference:
                 Omni Shoreham Hotel, Washington, {DC}, 1--4 October,
                 1990: proceedings",
  publisher =    "National Institute of Standards and Technology,
                 National Computer Security Center",
  address =      "Gaithersburg, MD, USA",
  pages =        "xi + 839",
  year =         "1990",
  ISBN =         "",
  LCCN =         "",
  bibdate =      "Thu Sep 04 10:27:54 1997",
  acknowledgement = ack-nhfb,
}

@Proceedings{Anonymous:1990:NCS,
  editor =       "Anonymous",
  booktitle =    "13th National Computer Security Conference.
                 Proceedings Information Systems Security. Standards -
                 the Key to the Future",
  title =        "13th National Computer Security Conference.
                 Proceedings Information Systems Security. Standards -
                 the Key to the Future",
  publisher =    pub-NIST,
  address =      pub-NIST:adr,
  pages =        "xi + 839",
  year =         "1990",
  bibdate =      "Mon Sep 30 17:00:16 MDT 1996",
  note =         "2 vol.",
  acknowledgement = ack-nhfb,
  confdate =     "1--4 Oct. 1990",
  conflocation = "Washington, DC, USA",
  confsponsor =  "NIST",
}

@Proceedings{Winkler:1991:SPS,
  editor =       "Stanley Winkler",
  booktitle =    "Shortening the path from specification to prototype:
                 the First International Workshop on Rapid System
                 Prototyping, Research Triangle Park, North Carolina,
                 USA, June 4--7, 1990",
  title =        "Shortening the path from specification to prototype:
                 the First International Workshop on Rapid System
                 Prototyping, Research Triangle Park, North Carolina,
                 {USA}, June 4--7, 1990",
  publisher =    pub-IEEE,
  address =      pub-IEEE:adr,
  pages =        "ix + 215",
  year =         "1991",
  ISBN =         "0-8186-2175-3",
  LCCN =         "QA76.9.C65 I577 1990",
  bibdate =      "Mon Sep 30 17:21:43 MDT 1996",
  note =         "IEEE Cat. No.91TH0380-6.",
  acknowledgement = ack-nhfb,
  confdate =     "4--7 June 1990",
  conflocation = "Research Triangle Park, NC, USA",
  confsponsor =  "IEEE",
}

@Proceedings{Anonymous:1992:EUG,
  editor =       "Anonymous",
  booktitle =    "{EurOpen. UNIX Goes East. Proceedings of the Autumn
                 1991 EurOpen Conference}",
  title =        "{EurOpen. UNIX Goes East. Proceedings of the Autumn
                 1991 EurOpen Conference}",
  publisher =    pub-EUROPEN,
  address =      pub-EUROPEN:adr,
  pages =        "vii + 322",
  year =         "1992",
  bibdate =      "Mon Sep 30 17:13:18 MDT 1996",
  abstract =     "The following topics were dealt with: UNIX and virtual
                 reality; interactive user interface design; QEF/QEI
                 model for software component consistency; multimedia
                 synchronization and UNIX; wafer-scale component;
                 performance evaluation; real time measures of UNIX-like
                 operating systems; steppingstones; measuring X11
                 performance; security and open working in the networked
                 academic community; phLOGIN; MANIFOLD; specification
                 language for IPC; distributed concurrent implementation
                 of standard ML; load balancing; public access
                 interfaces to OSI directory; managing international
                 X.500 directory pilot; XLookUp; process migration
                 mechanism using Minix; HAWKS-a toolkit for interpreted
                 telematic applications; virtual swap space in SunOS;
                 automounting; monitoring network performance;
                 StormCast-a distributed application;
                 location-independent object invocation in open
                 distributed systems; communicating database objects;
                 UNIX in Novell Environment; and international hotel
                 reservations system.",
  acknowledgement = ack-nhfb,
  classification = "C5470 (Performance evaluation and testing); C6140D
                 (High level languages); C6150J (Operating systems);
                 C6150N (Distributed systems); C7250N (Front end systems
                 for online searching)",
  confdate =     "16--20 Sept. 1991",
  conflocation = "Budapest, Hungary",
  keywords =     "Automounting; Communicating database objects;
                 Distributed application; Distributed concurrent; HAWKS;
                 Interactive user interface design; International hotel
                 reservations system; International X.500 directory
                 pilot; Interpreted telematic applications; IPC; Load
                 balancing; Location-independent object invocation;
                 MANIFOLD; Minix; Monitoring; Multimedia
                 synchronization; Network performance; Networked
                 academic community; Novell Environment; Open
                 distributed systems; Open working; OSI directory;
                 Performance evaluation; PhLOGIN; Process migration;
                 Public access interfaces; QEF/QEI model; Real time
                 measures; Security; Software component consistency;
                 Specification language; Standard ML; Steppingstones;
                 StormCast; SunOS; Toolkit; UNIX-like operating systems;
                 Virtual reality; Virtual swap space; Wafer-scale
                 component; X11 performance; XLookUp",
  pubcountry =   "UK",
  thesaurus =    "Distributed processing; Information retrieval systems;
                 Parallel languages; Performance evaluation; Unix; User
                 interfaces",
}

@Proceedings{Kanapoulos:1992:SIW,
  editor =       "N. Kanapoulos",
  booktitle =    "The Second International Workshop on Rapid System
                 Prototyping: Research Triangle Park, North Carolina,
                 USA, June 11--13, 1991: shortening the path from
                 specification to prototype",
  title =        "The Second International Workshop on Rapid System
                 Prototyping: Research Triangle Park, North Carolina,
                 {USA}, June 11--13, 1991: shortening the path from
                 specification to prototype",
  publisher =    pub-IEEE,
  address =      pub-IEEE:adr,
  pages =        "viii + 201",
  year =         "1992",
  ISBN =         "0-8186-3040-X",
  LCCN =         "QA76.76.D47 I598 1991",
  bibdate =      "Mon Sep 30 17:00:16 MDT 1996",
  note =         "IEEE Catalog No. 92TH0454-9.",
  acknowledgement = ack-nhfb,
  confdate =     "11--13 June 1991",
  conflocation = "Research Triangle Park, NC, USA",
  confsponsor =  "IEEE; ACM",
}

@Proceedings{Valero:1992:PCT,
  editor =       "M. Valero and E. Onate and M. Jane and J. L. Larriba
                 and B. Suarez",
  booktitle =    "Parallel Computing and Transputer Applications",
  title =        "Parallel Computing and Transputer Applications",
  publisher =    "CIMNE",
  address =      "Barcelona, Spain",
  pages =        "1520",
  year =         "1992",
  ISBN =         "84-87867-13-8",
  LCCN =         "????",
  bibdate =      "Mon Sep 30 17:00:16 MDT 1996",
  note =         "Two volumes.",
  acknowledgement = ack-nhfb,
  availability = "IOS Press, Amsterdam, Netherlands",
  confdate =     "21--25 Sept. 1992",
  conflocation = "Barcelona, Spain",
  pubcountry =   "Spain",
}

@Proceedings{IEEE:1994:SAI,
  editor =       "{IEEE}",
  booktitle =    "System architecture and integration: proceedings of
                 the 20th EUROMICRO Conference, EUROMICRO 94, September
                 5--8, 1994, Liverpool, England",
  title =        "System architecture and integration: proceedings of
                 the 20th {EUROMICRO} Conference, {EUROMICRO} 94,
                 September 5--8, 1994, Liverpool, England",
  publisher =    pub-IEEE,
  address =      pub-IEEE:adr,
  pages =        "xxi + 720",
  year =         "1994",
  ISBN =         "0-8186-6430-4",
  LCCN =         "QA76.9.A73 E94 1994",
  bibdate =      "Mon Sep 30 17:06:20 MDT 1996",
  acknowledgement = ack-nhfb,
  confdate =     "5--8 Sept. 1994",
  conflocation = "Liverpool, UK",
}

@Proceedings{Anonymous:1995:SCC,
  editor =       "Anonymous",
  booktitle =    "Small College computing: Annual symposium; 28th ---
                 April 1995, Sioux Falls, SD",
  title =        "Small College computing: Annual symposium; 28th ---
                 April 1995, Sioux Falls, {SD}",
  publisher =    "SCCS",
  address =      "????",
  pages =        "????",
  year =         "1995",
  bibdate =      "Thu Sep 4 06:34:12 MDT 1997",
  series =       "SCCS -PROCEEDINGS- 1995; 28th",
  acknowledgement = ack-nhfb,
}

@Proceedings{ACM:2006:PPA,
  editor =       "{ACM}",
  booktitle =    "{PLDI 2006: Proceedings of the 2006 ACM SIGPLAN
                 conference on Programming language design and
                 implementation 2006, Ottawa, Ontario, Canada, June
                 11--14, 2006}",
  title =        "{PLDI 2006: Proceedings of the 2006 ACM SIGPLAN
                 conference on Programming language design and
                 implementation 2006, Ottawa, Ontario, Canada, June
                 11--14, 2006}",
  publisher =    pub-ACM,
  address =      pub-ACM:adr,
  pages =        "????",
  year =         "2006",
  ISBN =         "1-59593-320-4",
  ISBN-13 =      "978-1-59593-320-1",
  LCCN =         "????",
  bibdate =      "Sat Aug 26 06:46:41 2006",
  note =         "ACM order number 548060.",
  acknowledgement = ack-nhfb,
}

@Proceedings{ACM:2006:PWP,
  editor =       "{ACM}",
  booktitle =    "{Proceedings of the 2006 workshop on Programming
                 languages and analysis for security, Ottawa, Ontario,
                 Canada}",
  title =        "{Proceedings of the 2006 workshop on Programming
                 languages and analysis for security, Ottawa, Ontario,
                 Canada}",
  publisher =    pub-ACM,
  address =      pub-ACM:adr,
  pages =        "????",
  year =         "2006",
  ISBN =         "1-59593-374-3",
  ISBN-13 =      "978-1-59593-374-4",
  LCCN =         "????",
  bibdate =      "Sat Aug 26 06:50:03 2006",
  acknowledgement = ack-nhfb,
}

@Proceedings{Jesshope:2006:ACS,
  editor =       "Chris Jesshope and Colin Egan",
  booktitle =    "{Advances in computer systems architecture: 11th
                 Asia-Pacific conference, ACSAC 2006, Shanghai, China,
                 September 6--8, 2006, proceedings}",
  title =        "{Advances in computer systems architecture: 11th
                 Asia-Pacific conference, ACSAC 2006, Shanghai, China,
                 September 6--8, 2006, proceedings}",
  volume =       "4186",
  publisher =    pub-SV,
  address =      pub-SV:adr,
  pages =        "xiv + 605",
  year =         "2006",
  ISBN =         "3-540-40056-7 (softcover)",
  ISBN-13 =      "978-3-540-40056-1 (softcover)",
  LCCN =         "QA76.9.A73 A28 2006",
  bibdate =      "Wed Jan 9 08:44:39 MST 2008",
  bibsource =    "z3950.loc.gov:7090/Voyager",
  series =       ser-LNCS,
  acknowledgement = ack-nhfb,
}
